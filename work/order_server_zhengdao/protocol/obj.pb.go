// Code generated by protoc-gen-go. DO NOT EDIT.
// source: obj.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 职位对象
type Job struct {
	JobAddress string `protobuf:"bytes,1,opt,name=JobAddress" json:"JobAddress,omitempty"`
	Role       string `protobuf:"bytes,2,opt,name=Role" json:"Role,omitempty"`
	Count      uint32 `protobuf:"varint,3,opt,name=Count" json:"Count,omitempty"`
	Radio      uint64 `protobuf:"varint,4,opt,name=Radio" json:"Radio,omitempty"`
	// uint64 IssueRadio = 5;
	Company           string   `protobuf:"bytes,6,opt,name=Company" json:"Company,omitempty"`
	TimeStamp         int64    `protobuf:"varint,7,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
	HasApply          bool     `protobuf:"varint,8,opt,name=HasApply" json:"HasApply,omitempty"`
	JobId             int32    `protobuf:"varint,9,opt,name=JobId" json:"JobId,omitempty"`
	FatherAddr        string   `protobuf:"bytes,10,opt,name=FatherAddr" json:"FatherAddr,omitempty"`
	WhiteList         []string `protobuf:"bytes,11,rep,name=WhiteList" json:"WhiteList,omitempty"`
	WhiteName         string   `protobuf:"bytes,12,opt,name=WhiteName" json:"WhiteName,omitempty"`
	WorkAddress       string   `protobuf:"bytes,13,opt,name=WorkAddress" json:"WorkAddress,omitempty"`
	WorkDetailAddress string   `protobuf:"bytes,14,opt,name=WorkDetailAddress" json:"WorkDetailAddress,omitempty"`
	EndTimeStamp      int64    `protobuf:"varint,15,opt,name=EndTimeStamp" json:"EndTimeStamp,omitempty"`
	ScheduleMoney     float64  `protobuf:"fixed64,16,opt,name=ScheduleMoney" json:"ScheduleMoney,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Job) GetJobAddress() string {
	if m != nil {
		return m.JobAddress
	}
	return ""
}

func (m *Job) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *Job) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Job) GetRadio() uint64 {
	if m != nil {
		return m.Radio
	}
	return 0
}

func (m *Job) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *Job) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *Job) GetHasApply() bool {
	if m != nil {
		return m.HasApply
	}
	return false
}

func (m *Job) GetJobId() int32 {
	if m != nil {
		return m.JobId
	}
	return 0
}

func (m *Job) GetFatherAddr() string {
	if m != nil {
		return m.FatherAddr
	}
	return ""
}

func (m *Job) GetWhiteList() []string {
	if m != nil {
		return m.WhiteList
	}
	return nil
}

func (m *Job) GetWhiteName() string {
	if m != nil {
		return m.WhiteName
	}
	return ""
}

func (m *Job) GetWorkAddress() string {
	if m != nil {
		return m.WorkAddress
	}
	return ""
}

func (m *Job) GetWorkDetailAddress() string {
	if m != nil {
		return m.WorkDetailAddress
	}
	return ""
}

func (m *Job) GetEndTimeStamp() int64 {
	if m != nil {
		return m.EndTimeStamp
	}
	return 0
}

func (m *Job) GetScheduleMoney() float64 {
	if m != nil {
		return m.ScheduleMoney
	}
	return 0
}

// 工作单位
type Unit struct {
	Role      string `protobuf:"bytes,1,opt,name=Role" json:"Role,omitempty"`
	Company   string `protobuf:"bytes,2,opt,name=Company" json:"Company,omitempty"`
	Location  string `protobuf:"bytes,3,opt,name=Location" json:"Location,omitempty"`
	StartTime uint32 `protobuf:"varint,4,opt,name=StartTime" json:"StartTime,omitempty"`
	EndTime   uint32 `protobuf:"varint,5,opt,name=EndTime" json:"EndTime,omitempty"`
}

func (m *Unit) Reset()                    { *m = Unit{} }
func (m *Unit) String() string            { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()               {}
func (*Unit) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Unit) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *Unit) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *Unit) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Unit) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Unit) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

// 排班
type Schedule struct {
	Jobaddr           string  `protobuf:"bytes,1,opt,name=Jobaddr" json:"Jobaddr,omitempty"`
	Jobs              []*Job  `protobuf:"bytes,2,rep,name=Jobs" json:"Jobs,omitempty"`
	TimeStamp         int64   `protobuf:"varint,3,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
	EndTimeStamp      int64   `protobuf:"varint,4,opt,name=EndTimeStamp" json:"EndTimeStamp,omitempty"`
	CompanyName       string  `protobuf:"bytes,5,opt,name=CompanyName" json:"CompanyName,omitempty"`
	CompanyRatio      int64   `protobuf:"varint,6,opt,name=CompanyRatio" json:"CompanyRatio,omitempty"`
	FatherAddress     string  `protobuf:"bytes,7,opt,name=FatherAddress" json:"FatherAddress,omitempty"`
	ScheduleMoney     float64 `protobuf:"fixed64,8,opt,name=ScheduleMoney" json:"ScheduleMoney,omitempty"`
	WorkAddress       string  `protobuf:"bytes,13,opt,name=WorkAddress" json:"WorkAddress,omitempty"`
	WorkDetailAddress string  `protobuf:"bytes,14,opt,name=WorkDetailAddress" json:"WorkDetailAddress,omitempty"`
}

func (m *Schedule) Reset()                    { *m = Schedule{} }
func (m *Schedule) String() string            { return proto.CompactTextString(m) }
func (*Schedule) ProtoMessage()               {}
func (*Schedule) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Schedule) GetJobaddr() string {
	if m != nil {
		return m.Jobaddr
	}
	return ""
}

func (m *Schedule) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func (m *Schedule) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *Schedule) GetEndTimeStamp() int64 {
	if m != nil {
		return m.EndTimeStamp
	}
	return 0
}

func (m *Schedule) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *Schedule) GetCompanyRatio() int64 {
	if m != nil {
		return m.CompanyRatio
	}
	return 0
}

func (m *Schedule) GetFatherAddress() string {
	if m != nil {
		return m.FatherAddress
	}
	return ""
}

func (m *Schedule) GetScheduleMoney() float64 {
	if m != nil {
		return m.ScheduleMoney
	}
	return 0
}

func (m *Schedule) GetWorkAddress() string {
	if m != nil {
		return m.WorkAddress
	}
	return ""
}

func (m *Schedule) GetWorkDetailAddress() string {
	if m != nil {
		return m.WorkDetailAddress
	}
	return ""
}

// 申请人信息
type ScheduleStaff struct {
	StaffAddr  string `protobuf:"bytes,1,opt,name=StaffAddr" json:"StaffAddr,omitempty"`
	Role       string `protobuf:"bytes,2,opt,name=Role" json:"Role,omitempty"`
	Ratio      uint64 `protobuf:"varint,3,opt,name=Ratio" json:"Ratio,omitempty"`
	JobId      int64  `protobuf:"varint,4,opt,name=JobId" json:"JobId,omitempty"`
	FatherAddr string `protobuf:"bytes,5,opt,name=FatherAddr" json:"FatherAddr,omitempty"`
}

func (m *ScheduleStaff) Reset()                    { *m = ScheduleStaff{} }
func (m *ScheduleStaff) String() string            { return proto.CompactTextString(m) }
func (*ScheduleStaff) ProtoMessage()               {}
func (*ScheduleStaff) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *ScheduleStaff) GetStaffAddr() string {
	if m != nil {
		return m.StaffAddr
	}
	return ""
}

func (m *ScheduleStaff) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *ScheduleStaff) GetRatio() uint64 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *ScheduleStaff) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

func (m *ScheduleStaff) GetFatherAddr() string {
	if m != nil {
		return m.FatherAddr
	}
	return ""
}

// 菜品详情
type Dish struct {
	DishName  string `protobuf:"bytes,1,opt,name=DishName" json:"DishName,omitempty"`
	DishCount string `protobuf:"bytes,2,opt,name=DishCount" json:"DishCount,omitempty"`
	DishPrice string `protobuf:"bytes,3,opt,name=DishPrice" json:"DishPrice,omitempty"`
}

func (m *Dish) Reset()                    { *m = Dish{} }
func (m *Dish) String() string            { return proto.CompactTextString(m) }
func (*Dish) ProtoMessage()               {}
func (*Dish) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *Dish) GetDishName() string {
	if m != nil {
		return m.DishName
	}
	return ""
}

func (m *Dish) GetDishCount() string {
	if m != nil {
		return m.DishCount
	}
	return ""
}

func (m *Dish) GetDishPrice() string {
	if m != nil {
		return m.DishPrice
	}
	return ""
}

// 分账详情
type Alloc struct {
	Role     string  `protobuf:"bytes,1,opt,name=Role" json:"Role,omitempty"`
	Count    uint32  `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
	Money    float64 `protobuf:"fixed64,3,opt,name=money" json:"money,omitempty"`
	Radio    float64 `protobuf:"fixed64,4,opt,name=Radio" json:"Radio,omitempty"`
	RealName string  `protobuf:"bytes,5,opt,name=RealName" json:"RealName,omitempty"`
	UserAddr string  `protobuf:"bytes,6,opt,name=UserAddr" json:"UserAddr,omitempty"`
	IsMe     bool    `protobuf:"varint,7,opt,name=IsMe" json:"IsMe,omitempty"`
}

func (m *Alloc) Reset()                    { *m = Alloc{} }
func (m *Alloc) String() string            { return proto.CompactTextString(m) }
func (*Alloc) ProtoMessage()               {}
func (*Alloc) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *Alloc) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *Alloc) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Alloc) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *Alloc) GetRadio() float64 {
	if m != nil {
		return m.Radio
	}
	return 0
}

func (m *Alloc) GetRealName() string {
	if m != nil {
		return m.RealName
	}
	return ""
}

func (m *Alloc) GetUserAddr() string {
	if m != nil {
		return m.UserAddr
	}
	return ""
}

func (m *Alloc) GetIsMe() bool {
	if m != nil {
		return m.IsMe
	}
	return false
}

// 订单信息
type Order struct {
	Table        uint32   `protobuf:"varint,1,opt,name=Table" json:"Table,omitempty"`
	TimeStamp    int64    `protobuf:"varint,2,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
	Money        float64  `protobuf:"fixed64,3,opt,name=Money" json:"Money,omitempty"`
	OrderId      string   `protobuf:"bytes,4,opt,name=OrderId" json:"OrderId,omitempty"`
	Content      string   `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty"`
	GetMoney_    float64  `protobuf:"fixed64,6,opt,name=GetMoney" json:"GetMoney,omitempty"`
	JobAddress   string   `protobuf:"bytes,7,opt,name=JobAddress" json:"JobAddress,omitempty"`
	Dishs        []*Dish  `protobuf:"bytes,8,rep,name=Dishs" json:"Dishs,omitempty"`
	CompanyName  string   `protobuf:"bytes,9,opt,name=CompanyName" json:"CompanyName,omitempty"`
	CompanyMoney float64  `protobuf:"fixed64,10,opt,name=CompanyMoney" json:"CompanyMoney,omitempty"`
	CompanyRadio float64  `protobuf:"fixed64,11,opt,name=CompanyRadio" json:"CompanyRadio,omitempty"`
	Allocs       []*Alloc `protobuf:"bytes,12,rep,name=Allocs" json:"Allocs,omitempty"`
	JobDetail    string   `protobuf:"bytes,13,opt,name=JobDetail" json:"JobDetail,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *Order) GetTable() uint32 {
	if m != nil {
		return m.Table
	}
	return 0
}

func (m *Order) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *Order) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *Order) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *Order) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Order) GetGetMoney_() float64 {
	if m != nil {
		return m.GetMoney_
	}
	return 0
}

func (m *Order) GetJobAddress() string {
	if m != nil {
		return m.JobAddress
	}
	return ""
}

func (m *Order) GetDishs() []*Dish {
	if m != nil {
		return m.Dishs
	}
	return nil
}

func (m *Order) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *Order) GetCompanyMoney() float64 {
	if m != nil {
		return m.CompanyMoney
	}
	return 0
}

func (m *Order) GetCompanyRadio() float64 {
	if m != nil {
		return m.CompanyRadio
	}
	return 0
}

func (m *Order) GetAllocs() []*Alloc {
	if m != nil {
		return m.Allocs
	}
	return nil
}

func (m *Order) GetJobDetail() string {
	if m != nil {
		return m.JobDetail
	}
	return ""
}

// 好友信息
type Friend struct {
	Name    string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Phone   string `protobuf:"bytes,2,opt,name=Phone" json:"Phone,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=Address" json:"Address,omitempty"`
}

func (m *Friend) Reset()                    { *m = Friend{} }
func (m *Friend) String() string            { return proto.CompactTextString(m) }
func (*Friend) ProtoMessage()               {}
func (*Friend) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *Friend) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Friend) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Friend) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*Job)(nil), "protocol.Job")
	proto.RegisterType((*Unit)(nil), "protocol.Unit")
	proto.RegisterType((*Schedule)(nil), "protocol.Schedule")
	proto.RegisterType((*ScheduleStaff)(nil), "protocol.scheduleStaff")
	proto.RegisterType((*Dish)(nil), "protocol.Dish")
	proto.RegisterType((*Alloc)(nil), "protocol.Alloc")
	proto.RegisterType((*Order)(nil), "protocol.Order")
	proto.RegisterType((*Friend)(nil), "protocol.Friend")
}

func init() { proto.RegisterFile("obj.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xd5, 0xc4, 0x71, 0x62, 0xdf, 0x34, 0xed, 0xf7, 0x59, 0x5d, 0x8c, 0x2a, 0x84, 0x8c, 0x55,
	0x09, 0x2f, 0x50, 0x17, 0xf0, 0x04, 0xa1, 0xa5, 0xd0, 0xa8, 0x85, 0x6a, 0xd2, 0xaa, 0x3b, 0x24,
	0x3b, 0x9e, 0x28, 0x06, 0xc7, 0x13, 0xd9, 0xd3, 0x45, 0x77, 0x2c, 0xd9, 0xb0, 0xe7, 0x15, 0x78,
	0x10, 0x9e, 0x86, 0x97, 0x40, 0x77, 0xc6, 0xe3, 0xbf, 0x06, 0x56, 0xac, 0xe2, 0x73, 0xae, 0x33,
	0x3e, 0xf7, 0x9e, 0x73, 0x07, 0x5c, 0x11, 0x7f, 0x3a, 0xd9, 0x16, 0x42, 0x0a, 0xcf, 0x51, 0x3f,
	0x4b, 0x91, 0x05, 0x3f, 0x2d, 0xb0, 0xe6, 0x22, 0xf6, 0x9e, 0x02, 0xcc, 0x45, 0x3c, 0x4b, 0x92,
	0x82, 0x97, 0x25, 0x25, 0x3e, 0x09, 0x5d, 0xd6, 0x62, 0x3c, 0x0f, 0x86, 0x4c, 0x64, 0x9c, 0x0e,
	0x54, 0x45, 0x3d, 0x7b, 0x87, 0x60, 0x9f, 0x8a, 0xfb, 0x5c, 0x52, 0xcb, 0x27, 0xe1, 0x94, 0x69,
	0x80, 0x2c, 0x8b, 0x92, 0x54, 0xd0, 0xa1, 0x4f, 0xc2, 0x21, 0xd3, 0xc0, 0xa3, 0x30, 0x3e, 0x15,
	0x9b, 0x6d, 0x94, 0x3f, 0xd0, 0x91, 0x3a, 0xc2, 0x40, 0xef, 0x09, 0xb8, 0x37, 0xe9, 0x86, 0x2f,
	0x64, 0xb4, 0xd9, 0xd2, 0xb1, 0x4f, 0x42, 0x8b, 0x35, 0x84, 0x77, 0x04, 0xce, 0xbb, 0xa8, 0x9c,
	0x6d, 0xb7, 0xd9, 0x03, 0x75, 0x7c, 0x12, 0x3a, 0xac, 0xc6, 0xf8, 0xa5, 0xb9, 0x88, 0x2f, 0x12,
	0xea, 0xfa, 0x24, 0xb4, 0x99, 0x06, 0xd8, 0xc9, 0x79, 0x24, 0xd7, 0xbc, 0x40, 0xe9, 0x14, 0x74,
	0x27, 0x0d, 0x83, 0xdf, 0xbb, 0x5b, 0xa7, 0x92, 0x5f, 0xa6, 0xa5, 0xa4, 0x13, 0xdf, 0x0a, 0x5d,
	0xd6, 0x10, 0x75, 0xf5, 0x7d, 0xb4, 0xe1, 0x74, 0x4f, 0xfd, 0xb9, 0x21, 0x3c, 0x1f, 0x26, 0x77,
	0xa2, 0xf8, 0x6c, 0xc6, 0x34, 0x55, 0xf5, 0x36, 0xe5, 0xbd, 0x80, 0xff, 0x11, 0x9e, 0x71, 0x19,
	0xa5, 0x99, 0x79, 0x6f, 0x5f, 0xbd, 0xf7, 0xb8, 0xe0, 0x05, 0xb0, 0xf7, 0x26, 0x4f, 0x9a, 0xf6,
	0x0f, 0x54, 0xfb, 0x1d, 0xce, 0x3b, 0x86, 0xe9, 0x62, 0xb9, 0xe6, 0xc9, 0x7d, 0xc6, 0xaf, 0x44,
	0xce, 0x1f, 0xe8, 0x7f, 0x3e, 0x09, 0x09, 0xeb, 0x92, 0xc1, 0x57, 0x02, 0xc3, 0xdb, 0x3c, 0x95,
	0xb5, 0x51, 0xa4, 0x65, 0x54, 0x6b, 0xf8, 0x83, 0xee, 0xf0, 0x8f, 0xc0, 0xb9, 0x14, 0xcb, 0x48,
	0xa6, 0x22, 0x57, 0x2e, 0xba, 0xac, 0xc6, 0x38, 0x8a, 0x85, 0x8c, 0x0a, 0x89, 0x52, 0x94, 0x99,
	0x53, 0xd6, 0x10, 0x78, 0x66, 0x25, 0x93, 0xda, 0xaa, 0x66, 0x60, 0xf0, 0x6b, 0x00, 0x8e, 0x11,
	0x87, 0xaf, 0xcd, 0x45, 0x1c, 0xa1, 0x15, 0x5a, 0x91, 0x81, 0xde, 0x33, 0x18, 0xce, 0x45, 0x5c,
	0xd2, 0x81, 0x6f, 0x85, 0x93, 0x97, 0xd3, 0x13, 0x13, 0xc9, 0x93, 0xb9, 0x88, 0x99, 0x2a, 0x75,
	0xa3, 0x61, 0xf5, 0xa3, 0xd1, 0x1f, 0xde, 0x70, 0xc7, 0xf0, 0x7c, 0x98, 0x54, 0xad, 0x2a, 0x43,
	0x6d, 0x6d, 0x58, 0x8b, 0xc2, 0x53, 0x2a, 0xc8, 0xb0, 0x6d, 0x95, 0x4e, 0x8b, 0x75, 0x38, 0xb4,
	0xa0, 0x09, 0x10, 0x1a, 0x3a, 0x56, 0xe7, 0x74, 0xc9, 0xc7, 0x46, 0x39, 0x3b, 0x8c, 0xfa, 0xd7,
	0x11, 0x0a, 0xbe, 0x11, 0x98, 0x96, 0xd5, 0x17, 0x16, 0x32, 0x5a, 0xad, 0x2a, 0xdf, 0x56, 0xab,
	0x59, 0x33, 0xf4, 0x86, 0xf8, 0xd3, 0x22, 0xeb, 0xe6, 0x2d, 0xb3, 0xb2, 0xd8, 0x75, 0xbd, 0x5e,
	0x7a, 0xb0, 0x3b, 0xd7, 0xcb, 0xee, 0xaf, 0x57, 0xf0, 0x11, 0x86, 0x67, 0x69, 0xb9, 0xc6, 0x64,
	0xe1, 0xaf, 0x1a, 0xbb, 0x16, 0x51, 0x63, 0x54, 0x88, 0xcf, 0xfa, 0xf2, 0xd0, 0x42, 0x1a, 0xc2,
	0x54, 0xaf, 0x8b, 0x74, 0xc9, 0xab, 0x50, 0x36, 0x44, 0xf0, 0x83, 0x80, 0x3d, 0xcb, 0x32, 0xb1,
	0xdc, 0x99, 0xf4, 0xfa, 0x4a, 0x1a, 0xf4, 0xae, 0xa4, 0x8d, 0x72, 0xc4, 0x52, 0x8e, 0x68, 0xd0,
	0xbd, 0xa8, 0x88, 0xb9, 0xa8, 0x8e, 0xc0, 0x61, 0x3c, 0xca, 0x5a, 0x71, 0xa9, 0x31, 0xd6, 0x6e,
	0xcb, 0xaa, 0x73, 0x7d, 0x8b, 0xd5, 0x18, 0xd5, 0x5c, 0x94, 0x57, 0x5c, 0x45, 0xc3, 0x61, 0xea,
	0x39, 0xf8, 0x6e, 0x81, 0xfd, 0xa1, 0x48, 0x78, 0x81, 0xdf, 0xba, 0x89, 0xe2, 0x4a, 0xec, 0x94,
	0x69, 0xd0, 0xcd, 0xf7, 0xa0, 0x9f, 0xef, 0x43, 0xb0, 0xaf, 0xda, 0xaa, 0x75, 0x7e, 0x28, 0x8c,
	0xd5, 0x91, 0x95, 0x2f, 0x2e, 0x33, 0x50, 0x6f, 0x79, 0x2e, 0x79, 0x2e, 0x2b, 0xe1, 0x06, 0xa2,
	0xee, 0xb7, 0x5c, 0xea, 0xc3, 0x46, 0xea, 0xb0, 0x1a, 0xf7, 0x2e, 0xfe, 0xf1, 0xa3, 0x8b, 0xff,
	0x18, 0x6c, 0x1c, 0x7e, 0x49, 0x1d, 0xb5, 0xa7, 0xfb, 0xcd, 0x9e, 0x22, 0xcd, 0x74, 0xb1, 0xbf,
	0x67, 0xee, 0xdf, 0xf6, 0x4c, 0xeb, 0x00, 0xa5, 0xa3, 0xc3, 0x75, 0x76, 0x11, 0x8d, 0x99, 0x74,
	0xde, 0xd1, 0xfe, 0x3c, 0x87, 0x91, 0xb2, 0xbf, 0xa4, 0x7b, 0x4a, 0xd0, 0x41, 0x23, 0x48, 0xf1,
	0xac, 0x2a, 0xe3, 0x70, 0xe7, 0x22, 0xd6, 0xcb, 0x52, 0xad, 0x59, 0x43, 0x04, 0x97, 0x30, 0x3a,
	0x2f, 0x52, 0x9e, 0x27, 0x68, 0x5c, 0x2b, 0xa4, 0xea, 0x19, 0x47, 0x7f, 0xbd, 0x16, 0xb9, 0xd9,
	0x12, 0x0d, 0x70, 0xc0, 0x66, 0x4e, 0x3a, 0x96, 0x06, 0xbe, 0xb6, 0xbe, 0x10, 0x12, 0x8f, 0x94,
	0x90, 0x57, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xf5, 0xd0, 0xc0, 0x68, 0x07, 0x00, 0x00,
}
