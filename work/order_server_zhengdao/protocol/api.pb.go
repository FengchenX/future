// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	api.proto
	config.proto
	obj.proto
	status.proto

It has these top-level messages:
	ReqThreeSetBill
	RespThreeSetBill
	ReqThreeSetOrder
	RespThreeSetOrder
	ReqDelWhite
	RespDelWhite
	ReqGetWhite
	RespGetWhite
	ReqAddWhite
	RespAddWhite
	Req
	Resp
	ReqGetEthBalance
	RespGetEthBalance
	ReqRegister
	RespRegister
	ReqBand
	RespBand
	ReqCheckAccount
	RespCheckAccount
	ReqScheduling
	RespScheduling
	ReqFindJob
	RespFindJob
	ReqPay
	RespPay
	ReqSetContent
	RespSetContent
	ReqGetContent
	RespGetContent
	ReqGetCanApply
	RespGetCanApply
	ReqGetSchedue
	RespGetSchedue
	ReqGetBalance
	RespGetBalance
	ReqCheckIsOkApplication
	RespCheckIsOkApplication
	ReqManageContract
	RespManageContract
	ReqCheckContract
	RespCheckContract
	ReqGetStaff
	RespGetStaff
	ReqLogin
	Login
	RespLogin
	ReqGetAllOrder
	RespGetAllOrder
	ReqGetAllMoney
	RespGetAllMoney
	ReqHistoryJoin
	RespHistoryJoin
	ReqGetAllIncome
	RespGetAllIncome
	ReqGetIncomeBySchedule
	RespGetIncomeBySchedule
	ReqGetNowJobAddr
	RespGetNowJobAddr
	CReloadConfig
	SReloadConfig
	CReloadDeploy
	SReloadDeploy
	ReqGetConfig
	RespGetConfig
	ReqSetConfig
	RespSetConfig
	Job
	Unit
	Schedule
	ScheduleStaff
	Dish
	Alloc
	Order
	Friend
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 客户端 三方支付
type ReqThreeSetBill struct {
	UserAddress     string  `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	PassWord        string  `protobuf:"bytes,2,opt,name=PassWord" json:"PassWord,omitempty"`
	AccountDescribe string  `protobuf:"bytes,3,opt,name=AccountDescribe" json:"AccountDescribe,omitempty"`
	Money           float64 `protobuf:"fixed64,4,opt,name=Money" json:"Money,omitempty"`
	JobAddress      string  `protobuf:"bytes,5,opt,name=JobAddress" json:"JobAddress,omitempty"`
	CompanyName     string  `protobuf:"bytes,6,opt,name=CompanyName" json:"CompanyName,omitempty"`
	SubCompanyName  string  `protobuf:"bytes,7,opt,name=SubCompanyName" json:"SubCompanyName,omitempty"`
}

func (m *ReqThreeSetBill) Reset()                    { *m = ReqThreeSetBill{} }
func (m *ReqThreeSetBill) String() string            { return proto.CompactTextString(m) }
func (*ReqThreeSetBill) ProtoMessage()               {}
func (*ReqThreeSetBill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReqThreeSetBill) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqThreeSetBill) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *ReqThreeSetBill) GetAccountDescribe() string {
	if m != nil {
		return m.AccountDescribe
	}
	return ""
}

func (m *ReqThreeSetBill) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *ReqThreeSetBill) GetJobAddress() string {
	if m != nil {
		return m.JobAddress
	}
	return ""
}

func (m *ReqThreeSetBill) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *ReqThreeSetBill) GetSubCompanyName() string {
	if m != nil {
		return m.SubCompanyName
	}
	return ""
}

// 客户端 三方支付
type RespThreeSetBill struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
}

func (m *RespThreeSetBill) Reset()                    { *m = RespThreeSetBill{} }
func (m *RespThreeSetBill) String() string            { return proto.CompactTextString(m) }
func (*RespThreeSetBill) ProtoMessage()               {}
func (*RespThreeSetBill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RespThreeSetBill) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

// 客户端 三方存证
type ReqThreeSetOrder struct {
	UserAddress     string  `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	PassWord        string  `protobuf:"bytes,2,opt,name=PassWord" json:"PassWord,omitempty"`
	AccountDescribe string  `protobuf:"bytes,3,opt,name=AccountDescribe" json:"AccountDescribe,omitempty"`
	OrderId         string  `protobuf:"bytes,4,opt,name=OrderId" json:"OrderId,omitempty"`
	Content         *Order  `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty"`
	Money           float64 `protobuf:"fixed64,6,opt,name=Money" json:"Money,omitempty"`
	JobAddress      string  `protobuf:"bytes,7,opt,name=JobAddress" json:"JobAddress,omitempty"`
}

func (m *ReqThreeSetOrder) Reset()                    { *m = ReqThreeSetOrder{} }
func (m *ReqThreeSetOrder) String() string            { return proto.CompactTextString(m) }
func (*ReqThreeSetOrder) ProtoMessage()               {}
func (*ReqThreeSetOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReqThreeSetOrder) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqThreeSetOrder) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *ReqThreeSetOrder) GetAccountDescribe() string {
	if m != nil {
		return m.AccountDescribe
	}
	return ""
}

func (m *ReqThreeSetOrder) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *ReqThreeSetOrder) GetContent() *Order {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ReqThreeSetOrder) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *ReqThreeSetOrder) GetJobAddress() string {
	if m != nil {
		return m.JobAddress
	}
	return ""
}

// 客户端 三方存证
type RespThreeSetOrder struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
}

func (m *RespThreeSetOrder) Reset()                    { *m = RespThreeSetOrder{} }
func (m *RespThreeSetOrder) String() string            { return proto.CompactTextString(m) }
func (*RespThreeSetOrder) ProtoMessage()               {}
func (*RespThreeSetOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RespThreeSetOrder) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

// 客户端 删除用人白名单
type ReqDelWhite struct {
	UserAddress     string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	PassWord        string `protobuf:"bytes,2,opt,name=PassWord" json:"PassWord,omitempty"`
	AccountDescribe string `protobuf:"bytes,3,opt,name=AccountDescribe" json:"AccountDescribe,omitempty"`
	AdderAddress    string `protobuf:"bytes,4,opt,name=AdderAddress" json:"AdderAddress,omitempty"`
}

func (m *ReqDelWhite) Reset()                    { *m = ReqDelWhite{} }
func (m *ReqDelWhite) String() string            { return proto.CompactTextString(m) }
func (*ReqDelWhite) ProtoMessage()               {}
func (*ReqDelWhite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReqDelWhite) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqDelWhite) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *ReqDelWhite) GetAccountDescribe() string {
	if m != nil {
		return m.AccountDescribe
	}
	return ""
}

func (m *ReqDelWhite) GetAdderAddress() string {
	if m != nil {
		return m.AdderAddress
	}
	return ""
}

// 客户端 删除用人白名单
type RespDelWhite struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
}

func (m *RespDelWhite) Reset()                    { *m = RespDelWhite{} }
func (m *RespDelWhite) String() string            { return proto.CompactTextString(m) }
func (*RespDelWhite) ProtoMessage()               {}
func (*RespDelWhite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RespDelWhite) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

// 客户端 根据账户地址查询用人白名单
type ReqGetWhite struct {
	UserAddress     string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	PassWord        string `protobuf:"bytes,2,opt,name=PassWord" json:"PassWord,omitempty"`
	AccountDescribe string `protobuf:"bytes,3,opt,name=AccountDescribe" json:"AccountDescribe,omitempty"`
}

func (m *ReqGetWhite) Reset()                    { *m = ReqGetWhite{} }
func (m *ReqGetWhite) String() string            { return proto.CompactTextString(m) }
func (*ReqGetWhite) ProtoMessage()               {}
func (*ReqGetWhite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReqGetWhite) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqGetWhite) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *ReqGetWhite) GetAccountDescribe() string {
	if m != nil {
		return m.AccountDescribe
	}
	return ""
}

// 客户端 根据账户地址查询用人白名单
type RespGetWhite struct {
	StatusCode uint32    `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Friends    []*Friend `protobuf:"bytes,2,rep,name=Friends" json:"Friends,omitempty"`
}

func (m *RespGetWhite) Reset()                    { *m = RespGetWhite{} }
func (m *RespGetWhite) String() string            { return proto.CompactTextString(m) }
func (*RespGetWhite) ProtoMessage()               {}
func (*RespGetWhite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RespGetWhite) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespGetWhite) GetFriends() []*Friend {
	if m != nil {
		return m.Friends
	}
	return nil
}

// 客户端 添加用人白名单
type ReqAddWhite struct {
	UserAddress     string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	PassWord        string `protobuf:"bytes,2,opt,name=PassWord" json:"PassWord,omitempty"`
	AccountDescribe string `protobuf:"bytes,3,opt,name=AccountDescribe" json:"AccountDescribe,omitempty"`
	Phone           string `protobuf:"bytes,4,opt,name=Phone" json:"Phone,omitempty"`
	FriendAddress   string `protobuf:"bytes,5,opt,name=FriendAddress" json:"FriendAddress,omitempty"`
}

func (m *ReqAddWhite) Reset()                    { *m = ReqAddWhite{} }
func (m *ReqAddWhite) String() string            { return proto.CompactTextString(m) }
func (*ReqAddWhite) ProtoMessage()               {}
func (*ReqAddWhite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReqAddWhite) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqAddWhite) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *ReqAddWhite) GetAccountDescribe() string {
	if m != nil {
		return m.AccountDescribe
	}
	return ""
}

func (m *ReqAddWhite) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ReqAddWhite) GetFriendAddress() string {
	if m != nil {
		return m.FriendAddress
	}
	return ""
}

// 客户端 添加用人白名单
type RespAddWhite struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
}

func (m *RespAddWhite) Reset()                    { *m = RespAddWhite{} }
func (m *RespAddWhite) String() string            { return proto.CompactTextString(m) }
func (*RespAddWhite) ProtoMessage()               {}
func (*RespAddWhite) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RespAddWhite) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

// 测试用
type Req struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Req) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 测试用
type Resp struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Resp) Reset()                    { *m = Resp{} }
func (m *Resp) String() string            { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()               {}
func (*Resp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Resp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 客户端 获取以太坊的余额
type ReqGetEthBalance struct {
	UserAddress string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
}

func (m *ReqGetEthBalance) Reset()                    { *m = ReqGetEthBalance{} }
func (m *ReqGetEthBalance) String() string            { return proto.CompactTextString(m) }
func (*ReqGetEthBalance) ProtoMessage()               {}
func (*ReqGetEthBalance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReqGetEthBalance) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

// 服务端 获取以太坊的余额
type RespGetEthBalance struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Balance    string `protobuf:"bytes,2,opt,name=Balance" json:"Balance,omitempty"`
}

func (m *RespGetEthBalance) Reset()                    { *m = RespGetEthBalance{} }
func (m *RespGetEthBalance) String() string            { return proto.CompactTextString(m) }
func (*RespGetEthBalance) ProtoMessage()               {}
func (*RespGetEthBalance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RespGetEthBalance) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespGetEthBalance) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

// 客户端 注册
type ReqRegister struct {
	PassWord string `protobuf:"bytes,1,opt,name=PassWord" json:"PassWord,omitempty"`
}

func (m *ReqRegister) Reset()                    { *m = ReqRegister{} }
func (m *ReqRegister) String() string            { return proto.CompactTextString(m) }
func (*ReqRegister) ProtoMessage()               {}
func (*ReqRegister) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ReqRegister) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

// 服务端 注册
type RespRegister struct {
	StatusCode      uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	UserAddress     string `protobuf:"bytes,2,opt,name=UserAddress" json:"UserAddress,omitempty"`
	PassWord        string `protobuf:"bytes,3,opt,name=PassWord" json:"PassWord,omitempty"`
	AccountDescribe string `protobuf:"bytes,4,opt,name=AccountDescribe" json:"AccountDescribe,omitempty"`
}

func (m *RespRegister) Reset()                    { *m = RespRegister{} }
func (m *RespRegister) String() string            { return proto.CompactTextString(m) }
func (*RespRegister) ProtoMessage()               {}
func (*RespRegister) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RespRegister) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespRegister) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *RespRegister) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *RespRegister) GetAccountDescribe() string {
	if m != nil {
		return m.AccountDescribe
	}
	return ""
}

// 客户端 绑定
type ReqBand struct {
	Name            string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	UserAddress     string `protobuf:"bytes,2,opt,name=UserAddress" json:"UserAddress,omitempty"`
	PassWord        string `protobuf:"bytes,3,opt,name=PassWord" json:"PassWord,omitempty"`
	Phone           string `protobuf:"bytes,4,opt,name=Phone" json:"Phone,omitempty"`
	AccountDescribe string `protobuf:"bytes,5,opt,name=AccountDescribe" json:"AccountDescribe,omitempty"`
}

func (m *ReqBand) Reset()                    { *m = ReqBand{} }
func (m *ReqBand) String() string            { return proto.CompactTextString(m) }
func (*ReqBand) ProtoMessage()               {}
func (*ReqBand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ReqBand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReqBand) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqBand) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *ReqBand) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ReqBand) GetAccountDescribe() string {
	if m != nil {
		return m.AccountDescribe
	}
	return ""
}

// 服务端 绑定
type RespBand struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
}

func (m *RespBand) Reset()                    { *m = RespBand{} }
func (m *RespBand) String() string            { return proto.CompactTextString(m) }
func (*RespBand) ProtoMessage()               {}
func (*RespBand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *RespBand) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

// 客户端 查询账户
type ReqCheckAccount struct {
	UserAddress string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
}

func (m *ReqCheckAccount) Reset()                    { *m = ReqCheckAccount{} }
func (m *ReqCheckAccount) String() string            { return proto.CompactTextString(m) }
func (*ReqCheckAccount) ProtoMessage()               {}
func (*ReqCheckAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ReqCheckAccount) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

// 服务端 查询账户
type RespCheckAccount struct {
	StatusCode      uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Role            string `protobuf:"bytes,3,opt,name=Role" json:"Role,omitempty"`
	PassWord        string `protobuf:"bytes,4,opt,name=PassWord" json:"PassWord,omitempty"`
	Phone           string `protobuf:"bytes,5,opt,name=Phone" json:"Phone,omitempty"`
	AccountDescribe string `protobuf:"bytes,6,opt,name=AccountDescribe" json:"AccountDescribe,omitempty"`
}

func (m *RespCheckAccount) Reset()                    { *m = RespCheckAccount{} }
func (m *RespCheckAccount) String() string            { return proto.CompactTextString(m) }
func (*RespCheckAccount) ProtoMessage()               {}
func (*RespCheckAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *RespCheckAccount) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespCheckAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RespCheckAccount) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *RespCheckAccount) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *RespCheckAccount) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *RespCheckAccount) GetAccountDescribe() string {
	if m != nil {
		return m.AccountDescribe
	}
	return ""
}

// 客户端 发布排班
type ReqScheduling struct {
	UserAddress       string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	PassWord          string `protobuf:"bytes,2,opt,name=PassWord" json:"PassWord,omitempty"`
	AccountDescribe   string `protobuf:"bytes,3,opt,name=AccountDescribe" json:"AccountDescribe,omitempty"`
	Company           string `protobuf:"bytes,4,opt,name=Company" json:"Company,omitempty"`
	Jobs              []*Job `protobuf:"bytes,5,rep,name=Jobs" json:"Jobs,omitempty"`
	TimeStamp         int64  `protobuf:"varint,6,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
	PayAccount        string `protobuf:"bytes,7,opt,name=PayAccount" json:"PayAccount,omitempty"`
	ManagerPayee      string `protobuf:"bytes,8,opt,name=ManagerPayee" json:"ManagerPayee,omitempty"`
	ManagerRatio      int64  `protobuf:"varint,9,opt,name=ManagerRatio" json:"ManagerRatio,omitempty"`
	StoresNumber      string `protobuf:"bytes,10,opt,name=StoresNumber" json:"StoresNumber,omitempty"`
	Postscript        string `protobuf:"bytes,11,opt,name=Postscript" json:"Postscript,omitempty"`
	MyRatio           uint32 `protobuf:"varint,12,opt,name=MyRatio" json:"MyRatio,omitempty"`
	WorkAddress       string `protobuf:"bytes,13,opt,name=WorkAddress" json:"WorkAddress,omitempty"`
	WorkDetailAddress string `protobuf:"bytes,14,opt,name=WorkDetailAddress" json:"WorkDetailAddress,omitempty"`
	EndTime           int64  `protobuf:"varint,15,opt,name=EndTime" json:"EndTime,omitempty"`
	BranchShop        string `protobuf:"bytes,16,opt,name=BranchShop" json:"BranchShop,omitempty"`
}

func (m *ReqScheduling) Reset()                    { *m = ReqScheduling{} }
func (m *ReqScheduling) String() string            { return proto.CompactTextString(m) }
func (*ReqScheduling) ProtoMessage()               {}
func (*ReqScheduling) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ReqScheduling) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqScheduling) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *ReqScheduling) GetAccountDescribe() string {
	if m != nil {
		return m.AccountDescribe
	}
	return ""
}

func (m *ReqScheduling) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *ReqScheduling) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func (m *ReqScheduling) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *ReqScheduling) GetPayAccount() string {
	if m != nil {
		return m.PayAccount
	}
	return ""
}

func (m *ReqScheduling) GetManagerPayee() string {
	if m != nil {
		return m.ManagerPayee
	}
	return ""
}

func (m *ReqScheduling) GetManagerRatio() int64 {
	if m != nil {
		return m.ManagerRatio
	}
	return 0
}

func (m *ReqScheduling) GetStoresNumber() string {
	if m != nil {
		return m.StoresNumber
	}
	return ""
}

func (m *ReqScheduling) GetPostscript() string {
	if m != nil {
		return m.Postscript
	}
	return ""
}

func (m *ReqScheduling) GetMyRatio() uint32 {
	if m != nil {
		return m.MyRatio
	}
	return 0
}

func (m *ReqScheduling) GetWorkAddress() string {
	if m != nil {
		return m.WorkAddress
	}
	return ""
}

func (m *ReqScheduling) GetWorkDetailAddress() string {
	if m != nil {
		return m.WorkDetailAddress
	}
	return ""
}

func (m *ReqScheduling) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ReqScheduling) GetBranchShop() string {
	if m != nil {
		return m.BranchShop
	}
	return ""
}

// 服务端 发布排班
type RespScheduling struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	JobAddress string `protobuf:"bytes,2,opt,name=JobAddress" json:"JobAddress,omitempty"`
}

func (m *RespScheduling) Reset()                    { *m = RespScheduling{} }
func (m *RespScheduling) String() string            { return proto.CompactTextString(m) }
func (*RespScheduling) ProtoMessage()               {}
func (*RespScheduling) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RespScheduling) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespScheduling) GetJobAddress() string {
	if m != nil {
		return m.JobAddress
	}
	return ""
}

// 客户端 申请工作
type ReqFindJob struct {
	UserAddress     string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	PassWord        string `protobuf:"bytes,2,opt,name=PassWord" json:"PassWord,omitempty"`
	AccountDescribe string `protobuf:"bytes,3,opt,name=AccountDescribe" json:"AccountDescribe,omitempty"`
	MyJob           *Job   `protobuf:"bytes,4,opt,name=MyJob" json:"MyJob,omitempty"`
}

func (m *ReqFindJob) Reset()                    { *m = ReqFindJob{} }
func (m *ReqFindJob) String() string            { return proto.CompactTextString(m) }
func (*ReqFindJob) ProtoMessage()               {}
func (*ReqFindJob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ReqFindJob) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqFindJob) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *ReqFindJob) GetAccountDescribe() string {
	if m != nil {
		return m.AccountDescribe
	}
	return ""
}

func (m *ReqFindJob) GetMyJob() *Job {
	if m != nil {
		return m.MyJob
	}
	return nil
}

// 服务端 申请工作
type RespFindJob struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	HashCode   string `protobuf:"bytes,2,opt,name=HashCode" json:"HashCode,omitempty"`
}

func (m *RespFindJob) Reset()                    { *m = RespFindJob{} }
func (m *RespFindJob) String() string            { return proto.CompactTextString(m) }
func (*RespFindJob) ProtoMessage()               {}
func (*RespFindJob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *RespFindJob) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespFindJob) GetHashCode() string {
	if m != nil {
		return m.HashCode
	}
	return ""
}

// 客户端 确认存证并付款
type ReqPay struct {
	UserAddress     string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	PassWord        string `protobuf:"bytes,2,opt,name=PassWord" json:"PassWord,omitempty"`
	AccountDescribe string `protobuf:"bytes,3,opt,name=AccountDescribe" json:"AccountDescribe,omitempty"`
	Money           uint64 `protobuf:"varint,4,opt,name=Money" json:"Money,omitempty"`
	Content         *Order `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty"`
	JobAddress      string `protobuf:"bytes,6,opt,name=JobAddress" json:"JobAddress,omitempty"`
}

func (m *ReqPay) Reset()                    { *m = ReqPay{} }
func (m *ReqPay) String() string            { return proto.CompactTextString(m) }
func (*ReqPay) ProtoMessage()               {}
func (*ReqPay) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ReqPay) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqPay) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *ReqPay) GetAccountDescribe() string {
	if m != nil {
		return m.AccountDescribe
	}
	return ""
}

func (m *ReqPay) GetMoney() uint64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *ReqPay) GetContent() *Order {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ReqPay) GetJobAddress() string {
	if m != nil {
		return m.JobAddress
	}
	return ""
}

// 服务端 确认存证并付款
type RespPay struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	OrderId    uint32 `protobuf:"varint,2,opt,name=OrderId" json:"OrderId,omitempty"`
	HashCode   string `protobuf:"bytes,3,opt,name=HashCode" json:"HashCode,omitempty"`
}

func (m *RespPay) Reset()                    { *m = RespPay{} }
func (m *RespPay) String() string            { return proto.CompactTextString(m) }
func (*RespPay) ProtoMessage()               {}
func (*RespPay) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *RespPay) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespPay) GetOrderId() uint32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *RespPay) GetHashCode() string {
	if m != nil {
		return m.HashCode
	}
	return ""
}

// 客户端 客户下单
type ReqSetContent struct {
	UserAddress     string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	PassWord        string `protobuf:"bytes,2,opt,name=PassWord" json:"PassWord,omitempty"`
	AccountDescribe string `protobuf:"bytes,3,opt,name=AccountDescribe" json:"AccountDescribe,omitempty"`
	OrderId         string `protobuf:"bytes,4,opt,name=OrderId" json:"OrderId,omitempty"`
	Content         *Order `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty"`
	JobAddress      string `protobuf:"bytes,6,opt,name=JobAddress" json:"JobAddress,omitempty"`
}

func (m *ReqSetContent) Reset()                    { *m = ReqSetContent{} }
func (m *ReqSetContent) String() string            { return proto.CompactTextString(m) }
func (*ReqSetContent) ProtoMessage()               {}
func (*ReqSetContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ReqSetContent) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqSetContent) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *ReqSetContent) GetAccountDescribe() string {
	if m != nil {
		return m.AccountDescribe
	}
	return ""
}

func (m *ReqSetContent) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *ReqSetContent) GetContent() *Order {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ReqSetContent) GetJobAddress() string {
	if m != nil {
		return m.JobAddress
	}
	return ""
}

// 服务端 客户下单
type RespSetContent struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	OrderId    string `protobuf:"bytes,2,opt,name=OrderId" json:"OrderId,omitempty"`
}

func (m *RespSetContent) Reset()                    { *m = RespSetContent{} }
func (m *RespSetContent) String() string            { return proto.CompactTextString(m) }
func (*RespSetContent) ProtoMessage()               {}
func (*RespSetContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *RespSetContent) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespSetContent) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

// 客户端 客户查单
type ReqGetContent struct {
	UserAddress string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	OrderId     string `protobuf:"bytes,2,opt,name=OrderId" json:"OrderId,omitempty"`
	JobAddress  string `protobuf:"bytes,3,opt,name=JobAddress" json:"JobAddress,omitempty"`
}

func (m *ReqGetContent) Reset()                    { *m = ReqGetContent{} }
func (m *ReqGetContent) String() string            { return proto.CompactTextString(m) }
func (*ReqGetContent) ProtoMessage()               {}
func (*ReqGetContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ReqGetContent) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqGetContent) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *ReqGetContent) GetJobAddress() string {
	if m != nil {
		return m.JobAddress
	}
	return ""
}

// 服务端 客户查单
type RespGetContent struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Content    *Order `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *RespGetContent) Reset()                    { *m = RespGetContent{} }
func (m *RespGetContent) String() string            { return proto.CompactTextString(m) }
func (*RespGetContent) ProtoMessage()               {}
func (*RespGetContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *RespGetContent) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespGetContent) GetContent() *Order {
	if m != nil {
		return m.Content
	}
	return nil
}

// 服务端 查询可申请的工作
type ReqGetCanApply struct {
	UserAddress string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	CompanyName string `protobuf:"bytes,2,opt,name=CompanyName" json:"CompanyName,omitempty"`
}

func (m *ReqGetCanApply) Reset()                    { *m = ReqGetCanApply{} }
func (m *ReqGetCanApply) String() string            { return proto.CompactTextString(m) }
func (*ReqGetCanApply) ProtoMessage()               {}
func (*ReqGetCanApply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ReqGetCanApply) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqGetCanApply) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

// 客户端 查询可申请的工作
type RespGetCanApply struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Jobs       []*Job `protobuf:"bytes,2,rep,name=Jobs" json:"Jobs,omitempty"`
}

func (m *RespGetCanApply) Reset()                    { *m = RespGetCanApply{} }
func (m *RespGetCanApply) String() string            { return proto.CompactTextString(m) }
func (*RespGetCanApply) ProtoMessage()               {}
func (*RespGetCanApply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *RespGetCanApply) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespGetCanApply) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

// 客户端 查询排班
type ReqGetSchedue struct {
	UserAddress string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	CompanyName string `protobuf:"bytes,2,opt,name=CompanyName" json:"CompanyName,omitempty"`
	TimeStamp   string `protobuf:"bytes,3,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
}

func (m *ReqGetSchedue) Reset()                    { *m = ReqGetSchedue{} }
func (m *ReqGetSchedue) String() string            { return proto.CompactTextString(m) }
func (*ReqGetSchedue) ProtoMessage()               {}
func (*ReqGetSchedue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ReqGetSchedue) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqGetSchedue) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *ReqGetSchedue) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

// 服务端 查询排班
type RespGetSchedue struct {
	StatusCode uint32      `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Schedules  []*Schedule `protobuf:"bytes,2,rep,name=Schedules" json:"Schedules,omitempty"`
}

func (m *RespGetSchedue) Reset()                    { *m = RespGetSchedue{} }
func (m *RespGetSchedue) String() string            { return proto.CompactTextString(m) }
func (*RespGetSchedue) ProtoMessage()               {}
func (*RespGetSchedue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *RespGetSchedue) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespGetSchedue) GetSchedules() []*Schedule {
	if m != nil {
		return m.Schedules
	}
	return nil
}

// 请求查询某一排班的收入
type ReqGetBalance struct {
	UserAddress    string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	SchedueAddress string `protobuf:"bytes,2,opt,name=SchedueAddress" json:"SchedueAddress,omitempty"`
}

func (m *ReqGetBalance) Reset()                    { *m = ReqGetBalance{} }
func (m *ReqGetBalance) String() string            { return proto.CompactTextString(m) }
func (*ReqGetBalance) ProtoMessage()               {}
func (*ReqGetBalance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *ReqGetBalance) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqGetBalance) GetSchedueAddress() string {
	if m != nil {
		return m.SchedueAddress
	}
	return ""
}

// 请求查询某一排班的收入
type RespGetBalance struct {
	StatusCode uint32  `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Money      float64 `protobuf:"fixed64,2,opt,name=Money" json:"Money,omitempty"`
}

func (m *RespGetBalance) Reset()                    { *m = RespGetBalance{} }
func (m *RespGetBalance) String() string            { return proto.CompactTextString(m) }
func (*RespGetBalance) ProtoMessage()               {}
func (*RespGetBalance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *RespGetBalance) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespGetBalance) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

// ----请求查询工作是否申请成功
type ReqCheckIsOkApplication struct {
	UserAddress string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	JobAddress  string `protobuf:"bytes,2,opt,name=JobAddress" json:"JobAddress,omitempty"`
}

func (m *ReqCheckIsOkApplication) Reset()                    { *m = ReqCheckIsOkApplication{} }
func (m *ReqCheckIsOkApplication) String() string            { return proto.CompactTextString(m) }
func (*ReqCheckIsOkApplication) ProtoMessage()               {}
func (*ReqCheckIsOkApplication) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *ReqCheckIsOkApplication) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqCheckIsOkApplication) GetJobAddress() string {
	if m != nil {
		return m.JobAddress
	}
	return ""
}

type RespCheckIsOkApplication struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	IsApplied  bool   `protobuf:"varint,2,opt,name=isApplied" json:"isApplied,omitempty"`
}

func (m *RespCheckIsOkApplication) Reset()                    { *m = RespCheckIsOkApplication{} }
func (m *RespCheckIsOkApplication) String() string            { return proto.CompactTextString(m) }
func (*RespCheckIsOkApplication) ProtoMessage()               {}
func (*RespCheckIsOkApplication) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *RespCheckIsOkApplication) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespCheckIsOkApplication) GetIsApplied() bool {
	if m != nil {
		return m.IsApplied
	}
	return false
}

// 客户端 管理合约(占时没用)
type ReqManageContract struct {
	UserAddress  string   `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	ContractHash uint64   `protobuf:"varint,2,opt,name=ContractHash" json:"ContractHash,omitempty"`
	Pre          []string `protobuf:"bytes,3,rep,name=Pre" json:"Pre,omitempty"`
	After        []string `protobuf:"bytes,4,rep,name=After" json:"After,omitempty"`
}

func (m *ReqManageContract) Reset()                    { *m = ReqManageContract{} }
func (m *ReqManageContract) String() string            { return proto.CompactTextString(m) }
func (*ReqManageContract) ProtoMessage()               {}
func (*ReqManageContract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ReqManageContract) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqManageContract) GetContractHash() uint64 {
	if m != nil {
		return m.ContractHash
	}
	return 0
}

func (m *ReqManageContract) GetPre() []string {
	if m != nil {
		return m.Pre
	}
	return nil
}

func (m *ReqManageContract) GetAfter() []string {
	if m != nil {
		return m.After
	}
	return nil
}

// 服务端 管理合约(占时没用)
type RespManageContract struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	HashCode   string `protobuf:"bytes,2,opt,name=HashCode" json:"HashCode,omitempty"`
}

func (m *RespManageContract) Reset()                    { *m = RespManageContract{} }
func (m *RespManageContract) String() string            { return proto.CompactTextString(m) }
func (*RespManageContract) ProtoMessage()               {}
func (*RespManageContract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *RespManageContract) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespManageContract) GetHashCode() string {
	if m != nil {
		return m.HashCode
	}
	return ""
}

// 客户端 查询合约
type ReqCheckContract struct {
	Address string `protobuf:"bytes,1,opt,name=Address" json:"Address,omitempty"`
	Key     string `protobuf:"bytes,2,opt,name=Key" json:"Key,omitempty"`
}

func (m *ReqCheckContract) Reset()                    { *m = ReqCheckContract{} }
func (m *ReqCheckContract) String() string            { return proto.CompactTextString(m) }
func (*ReqCheckContract) ProtoMessage()               {}
func (*ReqCheckContract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *ReqCheckContract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReqCheckContract) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// 服务端 查询合约
type RespCheckContract struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	HashCode   string `protobuf:"bytes,2,opt,name=HashCode" json:"HashCode,omitempty"`
}

func (m *RespCheckContract) Reset()                    { *m = RespCheckContract{} }
func (m *RespCheckContract) String() string            { return proto.CompactTextString(m) }
func (*RespCheckContract) ProtoMessage()               {}
func (*RespCheckContract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *RespCheckContract) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespCheckContract) GetHashCode() string {
	if m != nil {
		return m.HashCode
	}
	return ""
}

// 客户端 查询合约
type ReqGetStaff struct {
	UserAddress string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	JobAddress  string `protobuf:"bytes,2,opt,name=JobAddress" json:"JobAddress,omitempty"`
}

func (m *ReqGetStaff) Reset()                    { *m = ReqGetStaff{} }
func (m *ReqGetStaff) String() string            { return proto.CompactTextString(m) }
func (*ReqGetStaff) ProtoMessage()               {}
func (*ReqGetStaff) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *ReqGetStaff) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqGetStaff) GetJobAddress() string {
	if m != nil {
		return m.JobAddress
	}
	return ""
}

// 服务端 查询合约
type RespGetStaff struct {
	StatusCode uint32           `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Staffs     []*ScheduleStaff `protobuf:"bytes,2,rep,name=Staffs" json:"Staffs,omitempty"`
}

func (m *RespGetStaff) Reset()                    { *m = RespGetStaff{} }
func (m *RespGetStaff) String() string            { return proto.CompactTextString(m) }
func (*RespGetStaff) ProtoMessage()               {}
func (*RespGetStaff) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *RespGetStaff) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespGetStaff) GetStaffs() []*ScheduleStaff {
	if m != nil {
		return m.Staffs
	}
	return nil
}

// 客户端 登录服务
type ReqLogin struct {
	Phone string `protobuf:"bytes,1,opt,name=Phone" json:"Phone,omitempty"`
}

func (m *ReqLogin) Reset()                    { *m = ReqLogin{} }
func (m *ReqLogin) String() string            { return proto.CompactTextString(m) }
func (*ReqLogin) ProtoMessage()               {}
func (*ReqLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ReqLogin) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// 服务端 登录服务
type Login struct {
	StatusCode      uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Role            string `protobuf:"bytes,3,opt,name=Role" json:"Role,omitempty"`
	PassWord        string `protobuf:"bytes,4,opt,name=PassWord" json:"PassWord,omitempty"`
	Phone           string `protobuf:"bytes,5,opt,name=Phone" json:"Phone,omitempty"`
	Address         string `protobuf:"bytes,6,opt,name=Address" json:"Address,omitempty"`
	AccountDescribe string `protobuf:"bytes,7,opt,name=AccountDescribe" json:"AccountDescribe,omitempty"`
}

func (m *Login) Reset()                    { *m = Login{} }
func (m *Login) String() string            { return proto.CompactTextString(m) }
func (*Login) ProtoMessage()               {}
func (*Login) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *Login) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *Login) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Login) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *Login) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *Login) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Login) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Login) GetAccountDescribe() string {
	if m != nil {
		return m.AccountDescribe
	}
	return ""
}

type RespLogin struct {
	StatusCode uint32   `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Logins     []*Login `protobuf:"bytes,2,rep,name=Logins" json:"Logins,omitempty"`
}

func (m *RespLogin) Reset()                    { *m = RespLogin{} }
func (m *RespLogin) String() string            { return proto.CompactTextString(m) }
func (*RespLogin) ProtoMessage()               {}
func (*RespLogin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *RespLogin) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespLogin) GetLogins() []*Login {
	if m != nil {
		return m.Logins
	}
	return nil
}

// 客户端 查詢排班下所有訂單
type ReqGetAllOrder struct {
	UserAddress string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	JobAddress  string `protobuf:"bytes,2,opt,name=JobAddress" json:"JobAddress,omitempty"`
}

func (m *ReqGetAllOrder) Reset()                    { *m = ReqGetAllOrder{} }
func (m *ReqGetAllOrder) String() string            { return proto.CompactTextString(m) }
func (*ReqGetAllOrder) ProtoMessage()               {}
func (*ReqGetAllOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *ReqGetAllOrder) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqGetAllOrder) GetJobAddress() string {
	if m != nil {
		return m.JobAddress
	}
	return ""
}

// 服务端 查詢排班下所有訂單
type RespGetAllOrder struct {
	StatusCode uint32   `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Orders     []*Order `protobuf:"bytes,2,rep,name=Orders" json:"Orders,omitempty"`
	Sum        float64  `protobuf:"fixed64,3,opt,name=Sum" json:"Sum,omitempty"`
}

func (m *RespGetAllOrder) Reset()                    { *m = RespGetAllOrder{} }
func (m *RespGetAllOrder) String() string            { return proto.CompactTextString(m) }
func (*RespGetAllOrder) ProtoMessage()               {}
func (*RespGetAllOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *RespGetAllOrder) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespGetAllOrder) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *RespGetAllOrder) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

// 客户端 查询用户在某一公司所有收入
type ReqGetAllMoney struct {
	CompanyName string `protobuf:"bytes,1,opt,name=CompanyName" json:"CompanyName,omitempty"`
	UserAddress string `protobuf:"bytes,2,opt,name=UserAddress" json:"UserAddress,omitempty"`
}

func (m *ReqGetAllMoney) Reset()                    { *m = ReqGetAllMoney{} }
func (m *ReqGetAllMoney) String() string            { return proto.CompactTextString(m) }
func (*ReqGetAllMoney) ProtoMessage()               {}
func (*ReqGetAllMoney) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *ReqGetAllMoney) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *ReqGetAllMoney) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

// 服务端 查詢排班下所有訂單
type RespGetAllMoney struct {
	StatusCode uint32  `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Sum        float64 `protobuf:"fixed64,2,opt,name=Sum" json:"Sum,omitempty"`
}

func (m *RespGetAllMoney) Reset()                    { *m = RespGetAllMoney{} }
func (m *RespGetAllMoney) String() string            { return proto.CompactTextString(m) }
func (*RespGetAllMoney) ProtoMessage()               {}
func (*RespGetAllMoney) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *RespGetAllMoney) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespGetAllMoney) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

// 客户端 用户申请工作历史
type ReqHistoryJoin struct {
	UserAddress string `protobuf:"bytes,1,opt,name=UserAddress" json:"UserAddress,omitempty"`
	Company     string `protobuf:"bytes,2,opt,name=Company" json:"Company,omitempty"`
}

func (m *ReqHistoryJoin) Reset()                    { *m = ReqHistoryJoin{} }
func (m *ReqHistoryJoin) String() string            { return proto.CompactTextString(m) }
func (*ReqHistoryJoin) ProtoMessage()               {}
func (*ReqHistoryJoin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *ReqHistoryJoin) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqHistoryJoin) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

// 服务端 用户申请工作历史
type RespHistoryJoin struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Jobs       []*Job `protobuf:"bytes,2,rep,name=Jobs" json:"Jobs,omitempty"`
}

func (m *RespHistoryJoin) Reset()                    { *m = RespHistoryJoin{} }
func (m *RespHistoryJoin) String() string            { return proto.CompactTextString(m) }
func (*RespHistoryJoin) ProtoMessage()               {}
func (*RespHistoryJoin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *RespHistoryJoin) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespHistoryJoin) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

// 客户端 获取用户收入明细
type ReqGetAllIncome struct {
	CompanyName string `protobuf:"bytes,1,opt,name=CompanyName" json:"CompanyName,omitempty"`
	UserAddress string `protobuf:"bytes,2,opt,name=UserAddress" json:"UserAddress,omitempty"`
}

func (m *ReqGetAllIncome) Reset()                    { *m = ReqGetAllIncome{} }
func (m *ReqGetAllIncome) String() string            { return proto.CompactTextString(m) }
func (*ReqGetAllIncome) ProtoMessage()               {}
func (*ReqGetAllIncome) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *ReqGetAllIncome) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *ReqGetAllIncome) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

// 服务端 获取用户收入明细
type RespGetAllIncome struct {
	StatusCode uint32   `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Orders     []*Order `protobuf:"bytes,2,rep,name=Orders" json:"Orders,omitempty"`
}

func (m *RespGetAllIncome) Reset()                    { *m = RespGetAllIncome{} }
func (m *RespGetAllIncome) String() string            { return proto.CompactTextString(m) }
func (*RespGetAllIncome) ProtoMessage()               {}
func (*RespGetAllIncome) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *RespGetAllIncome) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespGetAllIncome) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

// 客户端 根据排班信息获取玩家收入详情
type ReqGetIncomeBySchedule struct {
	CompanyName string `protobuf:"bytes,1,opt,name=CompanyName" json:"CompanyName,omitempty"`
	UserAddress string `protobuf:"bytes,2,opt,name=UserAddress" json:"UserAddress,omitempty"`
	TimeStamp   string `protobuf:"bytes,3,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
}

func (m *ReqGetIncomeBySchedule) Reset()                    { *m = ReqGetIncomeBySchedule{} }
func (m *ReqGetIncomeBySchedule) String() string            { return proto.CompactTextString(m) }
func (*ReqGetIncomeBySchedule) ProtoMessage()               {}
func (*ReqGetIncomeBySchedule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *ReqGetIncomeBySchedule) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *ReqGetIncomeBySchedule) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *ReqGetIncomeBySchedule) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

// 服务端 根据排班信息获取玩家收入详情
type RespGetIncomeBySchedule struct {
	StatusCode uint32   `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	Orders     []*Order `protobuf:"bytes,2,rep,name=Orders" json:"Orders,omitempty"`
}

func (m *RespGetIncomeBySchedule) Reset()                    { *m = RespGetIncomeBySchedule{} }
func (m *RespGetIncomeBySchedule) String() string            { return proto.CompactTextString(m) }
func (*RespGetIncomeBySchedule) ProtoMessage()               {}
func (*RespGetIncomeBySchedule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *RespGetIncomeBySchedule) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespGetIncomeBySchedule) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

// 客户端 获取当前排班
type ReqGetNowJobAddr struct {
	CompanyName    string `protobuf:"bytes,1,opt,name=CompanyName" json:"CompanyName,omitempty"`
	SubCompanyName string `protobuf:"bytes,2,opt,name=SubCompanyName" json:"SubCompanyName,omitempty"`
	TimeStamp      string `protobuf:"bytes,3,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
	JobAddress     string `protobuf:"bytes,4,opt,name=JobAddress" json:"JobAddress,omitempty"`
}

func (m *ReqGetNowJobAddr) Reset()                    { *m = ReqGetNowJobAddr{} }
func (m *ReqGetNowJobAddr) String() string            { return proto.CompactTextString(m) }
func (*ReqGetNowJobAddr) ProtoMessage()               {}
func (*ReqGetNowJobAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *ReqGetNowJobAddr) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *ReqGetNowJobAddr) GetSubCompanyName() string {
	if m != nil {
		return m.SubCompanyName
	}
	return ""
}

func (m *ReqGetNowJobAddr) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

func (m *ReqGetNowJobAddr) GetJobAddress() string {
	if m != nil {
		return m.JobAddress
	}
	return ""
}

// 服务端 获取当前排班
type RespGetNowJobAddr struct {
	StatusCode uint32 `protobuf:"varint,1,opt,name=StatusCode" json:"StatusCode,omitempty"`
	JobAddr    string `protobuf:"bytes,2,opt,name=JobAddr" json:"JobAddr,omitempty"`
}

func (m *RespGetNowJobAddr) Reset()                    { *m = RespGetNowJobAddr{} }
func (m *RespGetNowJobAddr) String() string            { return proto.CompactTextString(m) }
func (*RespGetNowJobAddr) ProtoMessage()               {}
func (*RespGetNowJobAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *RespGetNowJobAddr) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RespGetNowJobAddr) GetJobAddr() string {
	if m != nil {
		return m.JobAddr
	}
	return ""
}

type CReloadConfig struct {
	OperateTimeout uint32 `protobuf:"varint,1,opt,name=Operate_timeout,json=OperateTimeout" json:"Operate_timeout,omitempty"`
	LocalAddress   string `protobuf:"bytes,2,opt,name=LocalAddress" json:"LocalAddress,omitempty"`
	Port           string `protobuf:"bytes,3,opt,name=Port" json:"Port,omitempty"`
	AccAddress     string `protobuf:"bytes,4,opt,name=AccAddress" json:"AccAddress,omitempty"`
	EthAddress     string `protobuf:"bytes,5,opt,name=EthAddress" json:"EthAddress,omitempty"`
	IpcDir         string `protobuf:"bytes,6,opt,name=IpcDir" json:"IpcDir,omitempty"`
	ServerId       string `protobuf:"bytes,7,opt,name=ServerId" json:"ServerId,omitempty"`
	ManagerKey     string `protobuf:"bytes,8,opt,name=ManagerKey" json:"ManagerKey,omitempty"`
	ManagerPhrase  string `protobuf:"bytes,9,opt,name=ManagerPhrase" json:"ManagerPhrase,omitempty"`
	KeyDir         string `protobuf:"bytes,10,opt,name=KeyDir" json:"KeyDir,omitempty"`
}

func (m *CReloadConfig) Reset()                    { *m = CReloadConfig{} }
func (m *CReloadConfig) String() string            { return proto.CompactTextString(m) }
func (*CReloadConfig) ProtoMessage()               {}
func (*CReloadConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *CReloadConfig) GetOperateTimeout() uint32 {
	if m != nil {
		return m.OperateTimeout
	}
	return 0
}

func (m *CReloadConfig) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

func (m *CReloadConfig) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *CReloadConfig) GetAccAddress() string {
	if m != nil {
		return m.AccAddress
	}
	return ""
}

func (m *CReloadConfig) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *CReloadConfig) GetIpcDir() string {
	if m != nil {
		return m.IpcDir
	}
	return ""
}

func (m *CReloadConfig) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *CReloadConfig) GetManagerKey() string {
	if m != nil {
		return m.ManagerKey
	}
	return ""
}

func (m *CReloadConfig) GetManagerPhrase() string {
	if m != nil {
		return m.ManagerPhrase
	}
	return ""
}

func (m *CReloadConfig) GetKeyDir() string {
	if m != nil {
		return m.KeyDir
	}
	return ""
}

type SReloadConfig struct {
}

func (m *SReloadConfig) Reset()                    { *m = SReloadConfig{} }
func (m *SReloadConfig) String() string            { return proto.CompactTextString(m) }
func (*SReloadConfig) ProtoMessage()               {}
func (*SReloadConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

type CReloadDeploy struct {
	Address string `protobuf:"bytes,1,opt,name=Address" json:"Address,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=Account" json:"Account,omitempty"`
}

func (m *CReloadDeploy) Reset()                    { *m = CReloadDeploy{} }
func (m *CReloadDeploy) String() string            { return proto.CompactTextString(m) }
func (*CReloadDeploy) ProtoMessage()               {}
func (*CReloadDeploy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *CReloadDeploy) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CReloadDeploy) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type SReloadDeploy struct {
}

func (m *SReloadDeploy) Reset()                    { *m = SReloadDeploy{} }
func (m *SReloadDeploy) String() string            { return proto.CompactTextString(m) }
func (*SReloadDeploy) ProtoMessage()               {}
func (*SReloadDeploy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func init() {
	proto.RegisterType((*ReqThreeSetBill)(nil), "protocol.ReqThreeSetBill")
	proto.RegisterType((*RespThreeSetBill)(nil), "protocol.RespThreeSetBill")
	proto.RegisterType((*ReqThreeSetOrder)(nil), "protocol.ReqThreeSetOrder")
	proto.RegisterType((*RespThreeSetOrder)(nil), "protocol.RespThreeSetOrder")
	proto.RegisterType((*ReqDelWhite)(nil), "protocol.ReqDelWhite")
	proto.RegisterType((*RespDelWhite)(nil), "protocol.RespDelWhite")
	proto.RegisterType((*ReqGetWhite)(nil), "protocol.ReqGetWhite")
	proto.RegisterType((*RespGetWhite)(nil), "protocol.RespGetWhite")
	proto.RegisterType((*ReqAddWhite)(nil), "protocol.ReqAddWhite")
	proto.RegisterType((*RespAddWhite)(nil), "protocol.RespAddWhite")
	proto.RegisterType((*Req)(nil), "protocol.Req")
	proto.RegisterType((*Resp)(nil), "protocol.Resp")
	proto.RegisterType((*ReqGetEthBalance)(nil), "protocol.ReqGetEthBalance")
	proto.RegisterType((*RespGetEthBalance)(nil), "protocol.RespGetEthBalance")
	proto.RegisterType((*ReqRegister)(nil), "protocol.ReqRegister")
	proto.RegisterType((*RespRegister)(nil), "protocol.RespRegister")
	proto.RegisterType((*ReqBand)(nil), "protocol.ReqBand")
	proto.RegisterType((*RespBand)(nil), "protocol.RespBand")
	proto.RegisterType((*ReqCheckAccount)(nil), "protocol.ReqCheckAccount")
	proto.RegisterType((*RespCheckAccount)(nil), "protocol.RespCheckAccount")
	proto.RegisterType((*ReqScheduling)(nil), "protocol.ReqScheduling")
	proto.RegisterType((*RespScheduling)(nil), "protocol.RespScheduling")
	proto.RegisterType((*ReqFindJob)(nil), "protocol.ReqFindJob")
	proto.RegisterType((*RespFindJob)(nil), "protocol.RespFindJob")
	proto.RegisterType((*ReqPay)(nil), "protocol.ReqPay")
	proto.RegisterType((*RespPay)(nil), "protocol.RespPay")
	proto.RegisterType((*ReqSetContent)(nil), "protocol.ReqSetContent")
	proto.RegisterType((*RespSetContent)(nil), "protocol.RespSetContent")
	proto.RegisterType((*ReqGetContent)(nil), "protocol.ReqGetContent")
	proto.RegisterType((*RespGetContent)(nil), "protocol.RespGetContent")
	proto.RegisterType((*ReqGetCanApply)(nil), "protocol.ReqGetCanApply")
	proto.RegisterType((*RespGetCanApply)(nil), "protocol.RespGetCanApply")
	proto.RegisterType((*ReqGetSchedue)(nil), "protocol.ReqGetSchedue")
	proto.RegisterType((*RespGetSchedue)(nil), "protocol.RespGetSchedue")
	proto.RegisterType((*ReqGetBalance)(nil), "protocol.ReqGetBalance")
	proto.RegisterType((*RespGetBalance)(nil), "protocol.RespGetBalance")
	proto.RegisterType((*ReqCheckIsOkApplication)(nil), "protocol.ReqCheckIsOkApplication")
	proto.RegisterType((*RespCheckIsOkApplication)(nil), "protocol.RespCheckIsOkApplication")
	proto.RegisterType((*ReqManageContract)(nil), "protocol.ReqManageContract")
	proto.RegisterType((*RespManageContract)(nil), "protocol.RespManageContract")
	proto.RegisterType((*ReqCheckContract)(nil), "protocol.ReqCheckContract")
	proto.RegisterType((*RespCheckContract)(nil), "protocol.RespCheckContract")
	proto.RegisterType((*ReqGetStaff)(nil), "protocol.ReqGetStaff")
	proto.RegisterType((*RespGetStaff)(nil), "protocol.RespGetStaff")
	proto.RegisterType((*ReqLogin)(nil), "protocol.ReqLogin")
	proto.RegisterType((*Login)(nil), "protocol.Login")
	proto.RegisterType((*RespLogin)(nil), "protocol.RespLogin")
	proto.RegisterType((*ReqGetAllOrder)(nil), "protocol.ReqGetAllOrder")
	proto.RegisterType((*RespGetAllOrder)(nil), "protocol.RespGetAllOrder")
	proto.RegisterType((*ReqGetAllMoney)(nil), "protocol.ReqGetAllMoney")
	proto.RegisterType((*RespGetAllMoney)(nil), "protocol.RespGetAllMoney")
	proto.RegisterType((*ReqHistoryJoin)(nil), "protocol.ReqHistoryJoin")
	proto.RegisterType((*RespHistoryJoin)(nil), "protocol.RespHistoryJoin")
	proto.RegisterType((*ReqGetAllIncome)(nil), "protocol.ReqGetAllIncome")
	proto.RegisterType((*RespGetAllIncome)(nil), "protocol.RespGetAllIncome")
	proto.RegisterType((*ReqGetIncomeBySchedule)(nil), "protocol.ReqGetIncomeBySchedule")
	proto.RegisterType((*RespGetIncomeBySchedule)(nil), "protocol.RespGetIncomeBySchedule")
	proto.RegisterType((*ReqGetNowJobAddr)(nil), "protocol.ReqGetNowJobAddr")
	proto.RegisterType((*RespGetNowJobAddr)(nil), "protocol.RespGetNowJobAddr")
	proto.RegisterType((*CReloadConfig)(nil), "protocol.CReloadConfig")
	proto.RegisterType((*SReloadConfig)(nil), "protocol.SReloadConfig")
	proto.RegisterType((*CReloadDeploy)(nil), "protocol.CReloadDeploy")
	proto.RegisterType((*SReloadDeploy)(nil), "protocol.SReloadDeploy")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiService service

type ApiServiceClient interface {
	SayHello(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	// 注册 绑定 登录
	Register(ctx context.Context, in *ReqRegister, opts ...grpc.CallOption) (*RespRegister, error)
	Bind(ctx context.Context, in *ReqBand, opts ...grpc.CallOption) (*RespBand, error)
	GetBind(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*RespLogin, error)
	GetAccount(ctx context.Context, in *ReqCheckAccount, opts ...grpc.CallOption) (*RespCheckAccount, error)
	GetEthBalance(ctx context.Context, in *ReqGetEthBalance, opts ...grpc.CallOption) (*RespGetEthBalance, error)
	// 排班 申请工作
	SetSchedule(ctx context.Context, in *ReqScheduling, opts ...grpc.CallOption) (*RespScheduling, error)
	GetSchedule(ctx context.Context, in *ReqGetSchedue, opts ...grpc.CallOption) (*RespGetSchedue, error)
	GetCanJoin(ctx context.Context, in *ReqGetSchedue, opts ...grpc.CallOption) (*RespGetSchedue, error)
	GetApply(ctx context.Context, in *ReqGetStaff, opts ...grpc.CallOption) (*RespGetStaff, error)
	GetJob(ctx context.Context, in *ReqGetCanApply, opts ...grpc.CallOption) (*RespGetCanApply, error)
	ApplyJob(ctx context.Context, in *ReqFindJob, opts ...grpc.CallOption) (*RespFindJob, error)
	HistoryJoin(ctx context.Context, in *ReqHistoryJoin, opts ...grpc.CallOption) (*RespHistoryJoin, error)
	CheckIsOkApplication(ctx context.Context, in *ReqCheckIsOkApplication, opts ...grpc.CallOption) (*RespCheckIsOkApplication, error)
	// 收入
	Pay(ctx context.Context, in *ReqPay, opts ...grpc.CallOption) (*RespPay, error)
	GetAllOrderBySchedule(ctx context.Context, in *ReqGetAllOrder, opts ...grpc.CallOption) (*RespGetAllOrder, error)
	GetContent(ctx context.Context, in *ReqGetContent, opts ...grpc.CallOption) (*RespGetContent, error)
	GetAllIncome(ctx context.Context, in *ReqGetAllIncome, opts ...grpc.CallOption) (*RespGetAllIncome, error)
	GetIncomeBySchedule(ctx context.Context, in *ReqGetIncomeBySchedule, opts ...grpc.CallOption) (*RespGetIncomeBySchedule, error)
	// 查询
	GetBalance(ctx context.Context, in *ReqGetBalance, opts ...grpc.CallOption) (*RespGetBalance, error)
	GetAllMoney(ctx context.Context, in *ReqGetAllMoney, opts ...grpc.CallOption) (*RespGetAllMoney, error)
	GetNowJobAddress(ctx context.Context, in *ReqGetNowJobAddr, opts ...grpc.CallOption) (*RespGetNowJobAddr, error)
	// 用人白名单
	AddWhiteList(ctx context.Context, in *ReqAddWhite, opts ...grpc.CallOption) (*RespAddWhite, error)
	GetWhiteList(ctx context.Context, in *ReqGetWhite, opts ...grpc.CallOption) (*RespGetWhite, error)
	DelWhiteList(ctx context.Context, in *ReqDelWhite, opts ...grpc.CallOption) (*RespDelWhite, error)
	// 三方
	ThreeSetOrder(ctx context.Context, in *ReqThreeSetOrder, opts ...grpc.CallOption) (*RespThreeSetOrder, error)
	ThreeSetBill(ctx context.Context, in *ReqThreeSetBill, opts ...grpc.CallOption) (*RespThreeSetBill, error)
	// 无用
	ManageContract(ctx context.Context, in *ReqManageContract, opts ...grpc.CallOption) (*RespManageContract, error)
	CheckContract(ctx context.Context, in *ReqCheckContract, opts ...grpc.CallOption) (*RespCheckContract, error)
	// 配置服务
	ReloadConfig(ctx context.Context, in *CReloadConfig, opts ...grpc.CallOption) (*SReloadConfig, error)
	ReloadDeploy(ctx context.Context, in *CReloadDeploy, opts ...grpc.CallOption) (*SReloadDeploy, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) SayHello(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := grpc.Invoke(ctx, "/protocol.ApiService/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Register(ctx context.Context, in *ReqRegister, opts ...grpc.CallOption) (*RespRegister, error) {
	out := new(RespRegister)
	err := grpc.Invoke(ctx, "/protocol.ApiService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Bind(ctx context.Context, in *ReqBand, opts ...grpc.CallOption) (*RespBand, error) {
	out := new(RespBand)
	err := grpc.Invoke(ctx, "/protocol.ApiService/Bind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBind(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*RespLogin, error) {
	out := new(RespLogin)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetBind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAccount(ctx context.Context, in *ReqCheckAccount, opts ...grpc.CallOption) (*RespCheckAccount, error) {
	out := new(RespCheckAccount)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetEthBalance(ctx context.Context, in *ReqGetEthBalance, opts ...grpc.CallOption) (*RespGetEthBalance, error) {
	out := new(RespGetEthBalance)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetEthBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SetSchedule(ctx context.Context, in *ReqScheduling, opts ...grpc.CallOption) (*RespScheduling, error) {
	out := new(RespScheduling)
	err := grpc.Invoke(ctx, "/protocol.ApiService/SetSchedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetSchedule(ctx context.Context, in *ReqGetSchedue, opts ...grpc.CallOption) (*RespGetSchedue, error) {
	out := new(RespGetSchedue)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetSchedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCanJoin(ctx context.Context, in *ReqGetSchedue, opts ...grpc.CallOption) (*RespGetSchedue, error) {
	out := new(RespGetSchedue)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetCanJoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetApply(ctx context.Context, in *ReqGetStaff, opts ...grpc.CallOption) (*RespGetStaff, error) {
	out := new(RespGetStaff)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetApply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetJob(ctx context.Context, in *ReqGetCanApply, opts ...grpc.CallOption) (*RespGetCanApply, error) {
	out := new(RespGetCanApply)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ApplyJob(ctx context.Context, in *ReqFindJob, opts ...grpc.CallOption) (*RespFindJob, error) {
	out := new(RespFindJob)
	err := grpc.Invoke(ctx, "/protocol.ApiService/ApplyJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HistoryJoin(ctx context.Context, in *ReqHistoryJoin, opts ...grpc.CallOption) (*RespHistoryJoin, error) {
	out := new(RespHistoryJoin)
	err := grpc.Invoke(ctx, "/protocol.ApiService/HistoryJoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CheckIsOkApplication(ctx context.Context, in *ReqCheckIsOkApplication, opts ...grpc.CallOption) (*RespCheckIsOkApplication, error) {
	out := new(RespCheckIsOkApplication)
	err := grpc.Invoke(ctx, "/protocol.ApiService/CheckIsOkApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Pay(ctx context.Context, in *ReqPay, opts ...grpc.CallOption) (*RespPay, error) {
	out := new(RespPay)
	err := grpc.Invoke(ctx, "/protocol.ApiService/Pay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAllOrderBySchedule(ctx context.Context, in *ReqGetAllOrder, opts ...grpc.CallOption) (*RespGetAllOrder, error) {
	out := new(RespGetAllOrder)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetAllOrderBySchedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetContent(ctx context.Context, in *ReqGetContent, opts ...grpc.CallOption) (*RespGetContent, error) {
	out := new(RespGetContent)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetContent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAllIncome(ctx context.Context, in *ReqGetAllIncome, opts ...grpc.CallOption) (*RespGetAllIncome, error) {
	out := new(RespGetAllIncome)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetAllIncome", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetIncomeBySchedule(ctx context.Context, in *ReqGetIncomeBySchedule, opts ...grpc.CallOption) (*RespGetIncomeBySchedule, error) {
	out := new(RespGetIncomeBySchedule)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetIncomeBySchedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBalance(ctx context.Context, in *ReqGetBalance, opts ...grpc.CallOption) (*RespGetBalance, error) {
	out := new(RespGetBalance)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAllMoney(ctx context.Context, in *ReqGetAllMoney, opts ...grpc.CallOption) (*RespGetAllMoney, error) {
	out := new(RespGetAllMoney)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetAllMoney", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetNowJobAddress(ctx context.Context, in *ReqGetNowJobAddr, opts ...grpc.CallOption) (*RespGetNowJobAddr, error) {
	out := new(RespGetNowJobAddr)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetNowJobAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AddWhiteList(ctx context.Context, in *ReqAddWhite, opts ...grpc.CallOption) (*RespAddWhite, error) {
	out := new(RespAddWhite)
	err := grpc.Invoke(ctx, "/protocol.ApiService/AddWhiteList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetWhiteList(ctx context.Context, in *ReqGetWhite, opts ...grpc.CallOption) (*RespGetWhite, error) {
	out := new(RespGetWhite)
	err := grpc.Invoke(ctx, "/protocol.ApiService/GetWhiteList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DelWhiteList(ctx context.Context, in *ReqDelWhite, opts ...grpc.CallOption) (*RespDelWhite, error) {
	out := new(RespDelWhite)
	err := grpc.Invoke(ctx, "/protocol.ApiService/DelWhiteList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ThreeSetOrder(ctx context.Context, in *ReqThreeSetOrder, opts ...grpc.CallOption) (*RespThreeSetOrder, error) {
	out := new(RespThreeSetOrder)
	err := grpc.Invoke(ctx, "/protocol.ApiService/ThreeSetOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ThreeSetBill(ctx context.Context, in *ReqThreeSetBill, opts ...grpc.CallOption) (*RespThreeSetBill, error) {
	out := new(RespThreeSetBill)
	err := grpc.Invoke(ctx, "/protocol.ApiService/ThreeSetBill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ManageContract(ctx context.Context, in *ReqManageContract, opts ...grpc.CallOption) (*RespManageContract, error) {
	out := new(RespManageContract)
	err := grpc.Invoke(ctx, "/protocol.ApiService/ManageContract", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CheckContract(ctx context.Context, in *ReqCheckContract, opts ...grpc.CallOption) (*RespCheckContract, error) {
	out := new(RespCheckContract)
	err := grpc.Invoke(ctx, "/protocol.ApiService/CheckContract", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ReloadConfig(ctx context.Context, in *CReloadConfig, opts ...grpc.CallOption) (*SReloadConfig, error) {
	out := new(SReloadConfig)
	err := grpc.Invoke(ctx, "/protocol.ApiService/ReloadConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ReloadDeploy(ctx context.Context, in *CReloadDeploy, opts ...grpc.CallOption) (*SReloadDeploy, error) {
	out := new(SReloadDeploy)
	err := grpc.Invoke(ctx, "/protocol.ApiService/ReloadDeploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiService service

type ApiServiceServer interface {
	SayHello(context.Context, *Req) (*Resp, error)
	// 注册 绑定 登录
	Register(context.Context, *ReqRegister) (*RespRegister, error)
	Bind(context.Context, *ReqBand) (*RespBand, error)
	GetBind(context.Context, *ReqLogin) (*RespLogin, error)
	GetAccount(context.Context, *ReqCheckAccount) (*RespCheckAccount, error)
	GetEthBalance(context.Context, *ReqGetEthBalance) (*RespGetEthBalance, error)
	// 排班 申请工作
	SetSchedule(context.Context, *ReqScheduling) (*RespScheduling, error)
	GetSchedule(context.Context, *ReqGetSchedue) (*RespGetSchedue, error)
	GetCanJoin(context.Context, *ReqGetSchedue) (*RespGetSchedue, error)
	GetApply(context.Context, *ReqGetStaff) (*RespGetStaff, error)
	GetJob(context.Context, *ReqGetCanApply) (*RespGetCanApply, error)
	ApplyJob(context.Context, *ReqFindJob) (*RespFindJob, error)
	HistoryJoin(context.Context, *ReqHistoryJoin) (*RespHistoryJoin, error)
	CheckIsOkApplication(context.Context, *ReqCheckIsOkApplication) (*RespCheckIsOkApplication, error)
	// 收入
	Pay(context.Context, *ReqPay) (*RespPay, error)
	GetAllOrderBySchedule(context.Context, *ReqGetAllOrder) (*RespGetAllOrder, error)
	GetContent(context.Context, *ReqGetContent) (*RespGetContent, error)
	GetAllIncome(context.Context, *ReqGetAllIncome) (*RespGetAllIncome, error)
	GetIncomeBySchedule(context.Context, *ReqGetIncomeBySchedule) (*RespGetIncomeBySchedule, error)
	// 查询
	GetBalance(context.Context, *ReqGetBalance) (*RespGetBalance, error)
	GetAllMoney(context.Context, *ReqGetAllMoney) (*RespGetAllMoney, error)
	GetNowJobAddress(context.Context, *ReqGetNowJobAddr) (*RespGetNowJobAddr, error)
	// 用人白名单
	AddWhiteList(context.Context, *ReqAddWhite) (*RespAddWhite, error)
	GetWhiteList(context.Context, *ReqGetWhite) (*RespGetWhite, error)
	DelWhiteList(context.Context, *ReqDelWhite) (*RespDelWhite, error)
	// 三方
	ThreeSetOrder(context.Context, *ReqThreeSetOrder) (*RespThreeSetOrder, error)
	ThreeSetBill(context.Context, *ReqThreeSetBill) (*RespThreeSetBill, error)
	// 无用
	ManageContract(context.Context, *ReqManageContract) (*RespManageContract, error)
	CheckContract(context.Context, *ReqCheckContract) (*RespCheckContract, error)
	// 配置服务
	ReloadConfig(context.Context, *CReloadConfig) (*SReloadConfig, error)
	ReloadDeploy(context.Context, *CReloadDeploy) (*SReloadDeploy, error)
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SayHello(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Register(ctx, req.(*ReqRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/Bind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Bind(ctx, req.(*ReqBand))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBind(ctx, req.(*ReqLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAccount(ctx, req.(*ReqCheckAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetEthBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetEthBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetEthBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetEthBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetEthBalance(ctx, req.(*ReqGetEthBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqScheduling)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/SetSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SetSchedule(ctx, req.(*ReqScheduling))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetSchedue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetSchedule(ctx, req.(*ReqGetSchedue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCanJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetSchedue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCanJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetCanJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCanJoin(ctx, req.(*ReqGetSchedue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetStaff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetApply(ctx, req.(*ReqGetStaff))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetCanApply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetJob(ctx, req.(*ReqGetCanApply))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ApplyJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFindJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ApplyJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/ApplyJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ApplyJob(ctx, req.(*ReqFindJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HistoryJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHistoryJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HistoryJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/HistoryJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HistoryJoin(ctx, req.(*ReqHistoryJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CheckIsOkApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckIsOkApplication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CheckIsOkApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/CheckIsOkApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CheckIsOkApplication(ctx, req.(*ReqCheckIsOkApplication))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Pay(ctx, req.(*ReqPay))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAllOrderBySchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAllOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAllOrderBySchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetAllOrderBySchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAllOrderBySchedule(ctx, req.(*ReqGetAllOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetContent(ctx, req.(*ReqGetContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAllIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAllIncome)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAllIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetAllIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAllIncome(ctx, req.(*ReqGetAllIncome))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetIncomeBySchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetIncomeBySchedule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetIncomeBySchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetIncomeBySchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetIncomeBySchedule(ctx, req.(*ReqGetIncomeBySchedule))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBalance(ctx, req.(*ReqGetBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAllMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAllMoney)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAllMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetAllMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAllMoney(ctx, req.(*ReqGetAllMoney))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetNowJobAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetNowJobAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetNowJobAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetNowJobAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetNowJobAddress(ctx, req.(*ReqGetNowJobAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AddWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddWhite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AddWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/AddWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AddWhiteList(ctx, req.(*ReqAddWhite))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetWhite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/GetWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetWhiteList(ctx, req.(*ReqGetWhite))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DelWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDelWhite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DelWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/DelWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DelWhiteList(ctx, req.(*ReqDelWhite))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ThreeSetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqThreeSetOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ThreeSetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/ThreeSetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ThreeSetOrder(ctx, req.(*ReqThreeSetOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ThreeSetBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqThreeSetBill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ThreeSetBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/ThreeSetBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ThreeSetBill(ctx, req.(*ReqThreeSetBill))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ManageContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqManageContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ManageContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/ManageContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ManageContract(ctx, req.(*ReqManageContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CheckContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CheckContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/CheckContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CheckContract(ctx, req.(*ReqCheckContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ReloadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CReloadConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ReloadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/ReloadConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ReloadConfig(ctx, req.(*CReloadConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ReloadDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CReloadDeploy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ReloadDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ApiService/ReloadDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ReloadDeploy(ctx, req.(*CReloadDeploy))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ApiService_SayHello_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ApiService_Register_Handler,
		},
		{
			MethodName: "Bind",
			Handler:    _ApiService_Bind_Handler,
		},
		{
			MethodName: "GetBind",
			Handler:    _ApiService_GetBind_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _ApiService_GetAccount_Handler,
		},
		{
			MethodName: "GetEthBalance",
			Handler:    _ApiService_GetEthBalance_Handler,
		},
		{
			MethodName: "SetSchedule",
			Handler:    _ApiService_SetSchedule_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _ApiService_GetSchedule_Handler,
		},
		{
			MethodName: "GetCanJoin",
			Handler:    _ApiService_GetCanJoin_Handler,
		},
		{
			MethodName: "GetApply",
			Handler:    _ApiService_GetApply_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _ApiService_GetJob_Handler,
		},
		{
			MethodName: "ApplyJob",
			Handler:    _ApiService_ApplyJob_Handler,
		},
		{
			MethodName: "HistoryJoin",
			Handler:    _ApiService_HistoryJoin_Handler,
		},
		{
			MethodName: "CheckIsOkApplication",
			Handler:    _ApiService_CheckIsOkApplication_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _ApiService_Pay_Handler,
		},
		{
			MethodName: "GetAllOrderBySchedule",
			Handler:    _ApiService_GetAllOrderBySchedule_Handler,
		},
		{
			MethodName: "GetContent",
			Handler:    _ApiService_GetContent_Handler,
		},
		{
			MethodName: "GetAllIncome",
			Handler:    _ApiService_GetAllIncome_Handler,
		},
		{
			MethodName: "GetIncomeBySchedule",
			Handler:    _ApiService_GetIncomeBySchedule_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _ApiService_GetBalance_Handler,
		},
		{
			MethodName: "GetAllMoney",
			Handler:    _ApiService_GetAllMoney_Handler,
		},
		{
			MethodName: "GetNowJobAddress",
			Handler:    _ApiService_GetNowJobAddress_Handler,
		},
		{
			MethodName: "AddWhiteList",
			Handler:    _ApiService_AddWhiteList_Handler,
		},
		{
			MethodName: "GetWhiteList",
			Handler:    _ApiService_GetWhiteList_Handler,
		},
		{
			MethodName: "DelWhiteList",
			Handler:    _ApiService_DelWhiteList_Handler,
		},
		{
			MethodName: "ThreeSetOrder",
			Handler:    _ApiService_ThreeSetOrder_Handler,
		},
		{
			MethodName: "ThreeSetBill",
			Handler:    _ApiService_ThreeSetBill_Handler,
		},
		{
			MethodName: "ManageContract",
			Handler:    _ApiService_ManageContract_Handler,
		},
		{
			MethodName: "CheckContract",
			Handler:    _ApiService_CheckContract_Handler,
		},
		{
			MethodName: "ReloadConfig",
			Handler:    _ApiService_ReloadConfig_Handler,
		},
		{
			MethodName: "ReloadDeploy",
			Handler:    _ApiService_ReloadDeploy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0x5f, 0x6f, 0xdb, 0xc8,
	0x11, 0x17, 0x25, 0x59, 0xb2, 0xc6, 0x96, 0xed, 0xec, 0xe5, 0x0f, 0xcd, 0x0b, 0x0e, 0xce, 0xf6,
	0xd0, 0x73, 0xae, 0x87, 0x5c, 0x91, 0xdc, 0x4b, 0x71, 0x40, 0x0b, 0x49, 0x4e, 0x1c, 0xeb, 0x62,
	0x5b, 0xa0, 0x7c, 0x48, 0x7b, 0x79, 0x08, 0x28, 0x71, 0x63, 0xb1, 0xa1, 0x49, 0x89, 0xa4, 0x5b,
	0xa8, 0x6f, 0xfd, 0x12, 0x05, 0xae, 0x7d, 0xeb, 0x37, 0xe8, 0x4b, 0x3f, 0x40, 0x81, 0x7e, 0x80,
	0x02, 0x7d, 0xec, 0xd7, 0xe8, 0x43, 0xdf, 0x8a, 0xfd, 0x47, 0xee, 0x92, 0x74, 0xa8, 0x34, 0x86,
	0x0f, 0x7d, 0x32, 0x77, 0x66, 0x77, 0x76, 0xe6, 0x37, 0x3b, 0x3b, 0x33, 0x2b, 0x43, 0xc7, 0x99,
	0x7b, 0x8f, 0xe6, 0x51, 0x98, 0x84, 0x68, 0x9d, 0xfd, 0x99, 0x86, 0xbe, 0xd5, 0x09, 0x27, 0xbf,
	0xe6, 0x44, 0xfc, 0x1f, 0x03, 0xb6, 0x6d, 0xb2, 0x38, 0x9b, 0x45, 0x84, 0x8c, 0x49, 0xd2, 0xf7,
	0x7c, 0x1f, 0xed, 0xc1, 0xc6, 0xb7, 0x31, 0x89, 0x7a, 0xae, 0x1b, 0x91, 0x38, 0x36, 0x8d, 0x3d,
	0x63, 0xbf, 0x63, 0xab, 0x24, 0x64, 0xc1, 0xfa, 0xc8, 0x89, 0xe3, 0x97, 0x61, 0xe4, 0x9a, 0x75,
	0xc6, 0x4e, 0xc7, 0x68, 0x1f, 0xb6, 0x7b, 0xd3, 0x69, 0x78, 0x19, 0x24, 0x07, 0x24, 0x9e, 0x46,
	0xde, 0x84, 0x98, 0x0d, 0x36, 0x25, 0x4f, 0x46, 0xb7, 0x61, 0xed, 0x38, 0x0c, 0xc8, 0xd2, 0x6c,
	0xee, 0x19, 0xfb, 0x86, 0xcd, 0x07, 0xe8, 0x13, 0x80, 0x61, 0x38, 0x91, 0x9b, 0xaf, 0xb1, 0xa5,
	0x0a, 0x85, 0x6a, 0x37, 0x08, 0x2f, 0xe6, 0x4e, 0xb0, 0x3c, 0x71, 0x2e, 0x88, 0xd9, 0xe2, 0xda,
	0x29, 0x24, 0xf4, 0x63, 0xd8, 0x1a, 0x5f, 0x4e, 0xd4, 0x49, 0x6d, 0x36, 0x29, 0x47, 0xc5, 0x8f,
	0x61, 0xc7, 0x26, 0xf1, 0x5c, 0xb3, 0xfd, 0x13, 0x80, 0x71, 0xe2, 0x24, 0x97, 0xf1, 0x20, 0x74,
	0x09, 0x33, 0xbd, 0x6b, 0x2b, 0x14, 0xfc, 0x6f, 0x83, 0x2e, 0x4a, 0xf1, 0x3a, 0x8d, 0x5c, 0x12,
	0xdd, 0x18, 0x60, 0x26, 0xb4, 0xd9, 0x86, 0x47, 0x2e, 0x83, 0xac, 0x63, 0xcb, 0x21, 0x7a, 0x08,
	0xed, 0x41, 0x18, 0x24, 0x24, 0x48, 0x18, 0x62, 0x1b, 0x8f, 0xb7, 0x1f, 0x49, 0x6f, 0x3f, 0x62,
	0x73, 0x6c, 0xc9, 0xcf, 0x50, 0x6f, 0x5d, 0x8d, 0x7a, 0x3b, 0x8f, 0x3a, 0x7e, 0x02, 0xb7, 0x54,
	0xac, 0xb8, 0xdd, 0x55, 0x60, 0x7d, 0x6f, 0xc0, 0x86, 0x4d, 0x16, 0x07, 0xc4, 0x7f, 0x39, 0xf3,
	0x12, 0x72, 0x63, 0x38, 0x61, 0xd8, 0xec, 0xb9, 0x6e, 0xb6, 0x11, 0x07, 0x4b, 0xa3, 0xe1, 0x47,
	0xb0, 0x49, 0x0d, 0x4a, 0x75, 0xab, 0xb2, 0xe5, 0x92, 0x99, 0x72, 0x48, 0x92, 0x1b, 0x35, 0x05,
	0x7f, 0xc7, 0xd5, 0x4c, 0xf7, 0xad, 0x50, 0x13, 0x7d, 0x0e, 0xed, 0x67, 0x91, 0x47, 0x02, 0x37,
	0x36, 0xeb, 0x7b, 0x8d, 0xfd, 0x8d, 0xc7, 0x3b, 0xd9, 0x41, 0xe0, 0x0c, 0x5b, 0x4e, 0xc0, 0x7f,
	0xe1, 0xee, 0xe9, 0xb9, 0xee, 0xcd, 0xba, 0xe7, 0x36, 0xac, 0x8d, 0x66, 0x61, 0x40, 0x84, 0x5f,
	0xf8, 0x00, 0x7d, 0x0a, 0x5d, 0xae, 0x98, 0x1e, 0xfa, 0x3a, 0x51, 0xba, 0x2d, 0xd5, 0xb9, 0xca,
	0x6d, 0xbb, 0xd0, 0xb0, 0xc9, 0x02, 0x21, 0x68, 0x06, 0xf4, 0x22, 0xe0, 0x36, 0xb1, 0x6f, 0xbc,
	0x07, 0x4d, 0x2a, 0x8a, 0x46, 0xd5, 0x05, 0x89, 0x63, 0xe7, 0x5c, 0xb2, 0xe5, 0x10, 0x7f, 0xc5,
	0x62, 0xfd, 0x90, 0x24, 0x4f, 0x93, 0x59, 0xdf, 0xf1, 0x9d, 0x60, 0xba, 0x02, 0x48, 0xf8, 0x98,
	0x87, 0x8a, 0xbe, 0xac, 0xca, 0x6f, 0x26, 0xb4, 0xc5, 0x54, 0x01, 0xac, 0x1c, 0xe2, 0x87, 0xcc,
	0x49, 0x36, 0x39, 0xf7, 0xe2, 0x84, 0x44, 0x9a, 0x0b, 0x0c, 0xdd, 0x05, 0xf8, 0x0f, 0x06, 0x47,
	0x27, 0x9d, 0x5c, 0xb5, 0x6b, 0xce, 0x98, 0xfa, 0xbb, 0x3d, 0xde, 0xa8, 0xf6, 0x78, 0xb3, 0xfc,
	0x14, 0xff, 0xc9, 0x80, 0xb6, 0x4d, 0x16, 0x7d, 0x27, 0x70, 0xa9, 0x2b, 0x4e, 0x14, 0x57, 0xb0,
	0x1b, 0xfb, 0xc3, 0xf4, 0x28, 0x3f, 0x4f, 0x25, 0xda, 0xad, 0x95, 0x6b, 0xf7, 0x39, 0xac, 0x53,
	0xd4, 0x98, 0x76, 0x55, 0xe7, 0xe9, 0x09, 0x4b, 0x97, 0x83, 0x19, 0x99, 0xbe, 0x15, 0x62, 0x56,
	0x38, 0x11, 0x7f, 0x35, 0x78, 0xa6, 0xd1, 0x96, 0x55, 0xf9, 0x46, 0xe2, 0x54, 0x57, 0x70, 0x42,
	0xd0, 0xb4, 0x43, 0x5f, 0x06, 0x16, 0xfb, 0xd6, 0x90, 0x69, 0x5e, 0x85, 0xcc, 0x5a, 0x05, 0x32,
	0xad, 0x72, 0x64, 0xfe, 0xdc, 0x84, 0xae, 0x4d, 0x16, 0xe3, 0xe9, 0x8c, 0xb8, 0x97, 0xbe, 0x17,
	0x9c, 0xdf, 0x64, 0xaa, 0x13, 0xa9, 0x5a, 0xa6, 0x3a, 0x31, 0x44, 0x0f, 0xa0, 0x39, 0x0c, 0x27,
	0xf4, 0x7a, 0xa0, 0xd7, 0x5b, 0x37, 0xbb, 0xde, 0x86, 0xe1, 0xc4, 0x66, 0x2c, 0x74, 0x1f, 0x3a,
	0x67, 0xde, 0x05, 0x19, 0x27, 0xce, 0xc5, 0x9c, 0x99, 0xd6, 0xb0, 0x33, 0x02, 0x05, 0x7e, 0xe4,
	0x2c, 0xc5, 0x86, 0x32, 0xd5, 0x65, 0x14, 0x9a, 0x3d, 0x8e, 0x9d, 0xc0, 0x39, 0x27, 0xd1, 0xc8,
	0x59, 0x12, 0x62, 0xae, 0xf3, 0xec, 0xa1, 0xd2, 0x94, 0x39, 0xb6, 0x93, 0x78, 0xa1, 0xd9, 0x61,
	0x9b, 0x68, 0x34, 0x3a, 0x67, 0x9c, 0x84, 0x11, 0x89, 0x4f, 0x2e, 0x2f, 0x26, 0x24, 0x32, 0x81,
	0xcb, 0x51, 0x69, 0x4c, 0x97, 0x30, 0x4e, 0xa8, 0xd1, 0xf3, 0xc4, 0xdc, 0x10, 0xba, 0xa4, 0x14,
	0x0a, 0xc3, 0xf1, 0x92, 0x6f, 0xb1, 0xc9, 0x4e, 0x88, 0x1c, 0x52, 0x47, 0xbc, 0x0c, 0xa3, 0xb7,
	0xd2, 0x11, 0x5d, 0xee, 0x08, 0x85, 0x84, 0xbe, 0x80, 0x5b, 0x74, 0x78, 0x40, 0x12, 0xc7, 0xf3,
	0xe5, 0xbc, 0x2d, 0x36, 0xaf, 0xc8, 0xa0, 0x3b, 0x3d, 0x0d, 0x5c, 0x8a, 0x92, 0xb9, 0xcd, 0x8c,
	0x91, 0x43, 0xaa, 0x63, 0x3f, 0x72, 0x82, 0xe9, 0x6c, 0x3c, 0x0b, 0xe7, 0xe6, 0x0e, 0xd7, 0x31,
	0xa3, 0xe0, 0x11, 0x6c, 0xd1, 0xc3, 0xad, 0x1c, 0x92, 0xaa, 0xa3, 0xad, 0x17, 0x1b, 0xf5, 0x42,
	0xb1, 0xf1, 0xbd, 0x01, 0x60, 0x93, 0xc5, 0x33, 0x2f, 0x70, 0x87, 0xe1, 0xe4, 0xc6, 0xce, 0xdc,
	0x8f, 0x60, 0xed, 0x78, 0x39, 0x0c, 0x27, 0xec, 0xc4, 0x15, 0x8e, 0x16, 0xe7, 0xe1, 0x23, 0x7a,
	0x1d, 0xc7, 0x73, 0xa9, 0x5b, 0x95, 0xa9, 0x16, 0xac, 0x3f, 0x77, 0xe2, 0x19, 0xe3, 0x0a, 0xcd,
	0xe4, 0x18, 0xff, 0xc3, 0x80, 0x96, 0x4d, 0x16, 0x23, 0x67, 0xf9, 0xc3, 0x94, 0xdc, 0x4d, 0x59,
	0xfc, 0xbd, 0x47, 0xf5, 0xa8, 0xbb, 0xae, 0x55, 0x70, 0xdd, 0x6b, 0x7a, 0xd1, 0xc7, 0x73, 0x6a,
	0xd3, 0x0a, 0x29, 0x4f, 0x56, 0xb3, 0x75, 0x7e, 0xb6, 0x65, 0x35, 0xab, 0x82, 0xd6, 0xc8, 0x81,
	0xf6, 0x2f, 0x83, 0x5f, 0x49, 0x24, 0x91, 0x2a, 0xfd, 0x5f, 0x55, 0xdf, 0x55, 0xf8, 0x0d, 0x45,
	0x30, 0x65, 0xe6, 0xbd, 0x27, 0x8c, 0x99, 0x5a, 0xf8, 0x2d, 0x43, 0xea, 0xf0, 0x7d, 0x90, 0xba,
	0x52, 0x58, 0x4e, 0xf1, 0x46, 0x41, 0xf1, 0x57, 0x5c, 0xf1, 0xc3, 0xd5, 0x15, 0x7f, 0x08, 0xed,
	0xa9, 0x40, 0xad, 0x7e, 0x05, 0x6a, 0x82, 0x8f, 0xcf, 0xa8, 0x70, 0x66, 0x89, 0x13, 0xf4, 0xe6,
	0x73, 0x7f, 0x95, 0x80, 0xc9, 0xf5, 0x89, 0xf5, 0x42, 0x9f, 0x88, 0xcf, 0x68, 0x2e, 0xe7, 0x2a,
	0x4b, 0xb1, 0x55, 0x3a, 0xcb, 0xe4, 0x53, 0xbf, 0x32, 0xf9, 0xe0, 0x85, 0x44, 0x9d, 0x5f, 0x88,
	0xe4, 0x3a, 0x54, 0xd5, 0x33, 0x1a, 0x07, 0x3f, 0x23, 0xe0, 0x49, 0x8a, 0xbd, 0xdc, 0xb3, 0xca,
	0x8e, 0x9f, 0x42, 0x47, 0xdc, 0xd7, 0x44, 0x1a, 0x83, 0x32, 0x63, 0x24, 0xcb, 0xce, 0x26, 0xe1,
	0x5f, 0x49, 0xb3, 0x56, 0x2e, 0x84, 0x59, 0x1f, 0xce, 0xf5, 0xd1, 0xaf, 0xfa, 0x1c, 0x15, 0x3f,
	0x4b, 0xd5, 0x5f, 0xb5, 0x5a, 0x4e, 0xaf, 0xb1, 0xba, 0xd2, 0xc3, 0xe2, 0x57, 0x70, 0x4f, 0xd6,
	0x66, 0x47, 0xf1, 0xe9, 0x5b, 0xea, 0x51, 0x6f, 0x4a, 0x93, 0x65, 0xb0, 0x82, 0xb2, 0x55, 0x39,
	0xe9, 0x97, 0x60, 0xa6, 0x25, 0x5c, 0x5e, 0x7a, 0x95, 0xba, 0xf7, 0xa1, 0xe3, 0xc5, 0x6c, 0x01,
	0xe1, 0x71, 0xb5, 0x6e, 0x67, 0x04, 0xfc, 0x7b, 0x83, 0x36, 0x0c, 0x0b, 0x5e, 0x3b, 0xd0, 0xe0,
	0x89, 0x9c, 0xe9, 0x2a, 0xb1, 0x8a, 0x61, 0x53, 0xce, 0xa6, 0xb7, 0x23, 0x13, 0xdc, 0xb4, 0x35,
	0x1a, 0xda, 0x81, 0xc6, 0x28, 0xa2, 0x37, 0x5a, 0x63, 0xbf, 0x63, 0xd3, 0x4f, 0x0a, 0x5d, 0xef,
	0x4d, 0x42, 0x22, 0xb3, 0xc9, 0x68, 0x7c, 0x80, 0x47, 0x80, 0xa8, 0x75, 0x39, 0x1d, 0x3e, 0x24,
	0xb9, 0xfd, 0x9c, 0xf5, 0x4e, 0x0c, 0xae, 0x54, 0x9e, 0x09, 0x6d, 0xdd, 0x1e, 0x39, 0xa4, 0x7a,
	0x7e, 0x23, 0xdc, 0xd9, 0xb1, 0xe9, 0x27, 0x3e, 0xe5, 0x5d, 0x94, 0x2e, 0xe0, 0x43, 0x14, 0x3a,
	0x95, 0x0d, 0xfc, 0x38, 0x71, 0xde, 0xbc, 0xb9, 0x86, 0x13, 0xf1, 0x3a, 0x6d, 0xcd, 0xb9, 0xc4,
	0x2a, 0xe5, 0xbe, 0x84, 0x16, 0x9b, 0x28, 0x03, 0xee, 0x5e, 0x16, 0x70, 0xb1, 0x08, 0x33, 0xc6,
	0xb7, 0xc5, 0x34, 0xbc, 0x47, 0xfb, 0x92, 0xc5, 0x8b, 0xf0, 0xdc, 0x0b, 0xb2, 0x4a, 0xde, 0x50,
	0x2a, 0x79, 0xfc, 0x77, 0x03, 0xd6, 0x38, 0xff, 0x87, 0xeb, 0x26, 0x14, 0xa7, 0xb6, 0x74, 0xa7,
	0x96, 0xa4, 0xd6, 0x76, 0x79, 0x9f, 0x71, 0x06, 0x1d, 0x0a, 0xe5, 0x6a, 0xa6, 0x7c, 0x06, 0x2d,
	0x36, 0x51, 0xe2, 0xa8, 0xa4, 0x0d, 0x46, 0xb7, 0x05, 0x1b, 0xdb, 0x32, 0x6b, 0xf4, 0x7c, 0x7f,
	0xd5, 0x87, 0xba, 0x2a, 0xa7, 0xfb, 0x69, 0xce, 0x48, 0x85, 0xae, 0xa0, 0x2f, 0x9b, 0x58, 0xa2,
	0x2f, 0x4f, 0x73, 0x82, 0x4d, 0x83, 0x60, 0x7c, 0x79, 0xc1, 0xdc, 0x61, 0xd8, 0xf4, 0x33, 0xcb,
	0x7b, 0x3d, 0xdf, 0xe7, 0xa5, 0x5a, 0x2e, 0x55, 0x18, 0xc5, 0x54, 0x51, 0xd9, 0x4b, 0xe3, 0x81,
	0x6a, 0x43, 0xfa, 0xfc, 0xf7, 0x4e, 0x1b, 0x84, 0x6a, 0xf5, 0x4c, 0xb5, 0x17, 0x4c, 0xb5, 0xe7,
	0x5e, 0x9c, 0x84, 0xd1, 0x72, 0x18, 0x7a, 0xc1, 0x6a, 0xd5, 0x85, 0x6c, 0xea, 0xea, 0x5a, 0x53,
	0x27, 0x53, 0xb1, 0x2a, 0xee, 0x1a, 0x52, 0xf1, 0xb7, 0xac, 0x59, 0xe7, 0x76, 0x1e, 0x05, 0xd3,
	0x90, 0xa3, 0xf3, 0xc1, 0xf8, 0xbd, 0xe2, 0xdd, 0xbc, 0x26, 0xf7, 0xba, 0x0e, 0x01, 0xfe, 0x1d,
	0xdc, 0xe5, 0x3a, 0x73, 0xc1, 0xfd, 0xa5, 0x4c, 0xc1, 0xd7, 0xa1, 0x7a, 0x65, 0x1d, 0x71, 0x4f,
	0x18, 0x56, 0xd8, 0xfc, 0xda, 0xec, 0xfb, 0xa3, 0x21, 0x1f, 0xd5, 0x4e, 0xc2, 0xdf, 0x8a, 0xc0,
	0x5a, 0xc1, 0xb4, 0xe2, 0x9b, 0x7e, 0xbd, 0xec, 0x4d, 0xff, 0xdd, 0x06, 0xe6, 0xa2, 0xbb, 0x59,
	0x88, 0xee, 0xec, 0xe9, 0x4e, 0x51, 0x6e, 0x85, 0x02, 0x5c, 0x4c, 0x95, 0xa7, 0x5a, 0x0c, 0xf1,
	0xdf, 0xea, 0xd0, 0x1d, 0xd8, 0xc4, 0x0f, 0x1d, 0x77, 0x10, 0x06, 0x6f, 0xbc, 0x73, 0xf4, 0x19,
	0x6c, 0x9f, 0xce, 0x49, 0xe4, 0x24, 0xe4, 0x75, 0xe2, 0x5d, 0x90, 0xf0, 0x32, 0x11, 0x02, 0xb7,
	0x04, 0xf9, 0x8c, 0x53, 0x69, 0x72, 0x7f, 0x11, 0x4e, 0x1d, 0x5f, 0xf7, 0xa5, 0x46, 0xa3, 0xf7,
	0xf7, 0x28, 0x8c, 0x12, 0x79, 0x7f, 0xd3, 0x6f, 0xaa, 0x6c, 0x6f, 0x3a, 0xcd, 0x59, 0x98, 0x51,
	0x28, 0xff, 0x69, 0x32, 0xcb, 0xfd, 0xba, 0x92, 0x51, 0xd0, 0x5d, 0x68, 0x1d, 0xcd, 0xa7, 0x07,
	0x5e, 0x24, 0x2e, 0x73, 0x31, 0xa2, 0x79, 0x61, 0x4c, 0xa2, 0xdf, 0xb0, 0xce, 0x80, 0x5f, 0xe2,
	0xe9, 0x98, 0xca, 0x14, 0x0f, 0x1f, 0x34, 0x87, 0xf3, 0xe7, 0x12, 0x85, 0x82, 0x3e, 0x85, 0xae,
	0x7c, 0x3c, 0x99, 0x45, 0x4e, 0x4c, 0xd8, 0x6b, 0x49, 0xc7, 0xd6, 0x89, 0x74, 0xe7, 0x6f, 0xc8,
	0x92, 0xee, 0xcc, 0x1f, 0x4a, 0xc4, 0x08, 0x6f, 0x43, 0x77, 0xac, 0x62, 0x88, 0x07, 0x29, 0xa8,
	0x07, 0x64, 0xee, 0x87, 0xcb, 0x77, 0x94, 0x15, 0x94, 0x23, 0xde, 0x79, 0x84, 0x6b, 0xc4, 0x50,
	0x91, 0xca, 0x85, 0x3c, 0xfe, 0xe7, 0x0e, 0x40, 0x6f, 0xee, 0x51, 0xa3, 0xbc, 0x29, 0x41, 0x3f,
	0x81, 0xf5, 0xb1, 0xb3, 0x7c, 0x4e, 0x7c, 0x3f, 0x44, 0xca, 0xdd, 0x62, 0x93, 0x85, 0xb5, 0xa5,
	0x0e, 0xe3, 0x39, 0xae, 0xa1, 0xaf, 0x69, 0xa2, 0x16, 0x4f, 0xae, 0x77, 0xb4, 0xc9, 0x92, 0x6c,
	0xdd, 0xd5, 0x17, 0x49, 0x3a, 0xae, 0xa1, 0x2f, 0xa1, 0xd9, 0xf7, 0x02, 0x17, 0xdd, 0xd2, 0x16,
	0xf6, 0x9d, 0xc0, 0xb5, 0x90, 0xbe, 0x88, 0xd2, 0x70, 0x0d, 0x7d, 0x05, 0x6d, 0x5a, 0x2a, 0xd3,
	0x35, 0xda, 0x04, 0x5e, 0x29, 0x58, 0x1f, 0xe9, 0x8b, 0x18, 0x11, 0xd7, 0xd0, 0x53, 0x00, 0x7a,
	0x61, 0x89, 0x37, 0xae, 0x5d, 0x6d, 0xa1, 0xfa, 0x2e, 0x69, 0x59, 0xfa, 0x7a, 0x95, 0x87, 0x6b,
	0x68, 0x08, 0x5d, 0xfd, 0x61, 0x5b, 0x9b, 0xae, 0xbf, 0x95, 0x5b, 0x1f, 0xeb, 0xa2, 0x34, 0x26,
	0xae, 0xa1, 0x3e, 0x6c, 0x8c, 0x65, 0xcb, 0xe2, 0x13, 0x74, 0x4f, 0x93, 0x94, 0x3d, 0x27, 0x59,
	0xa6, 0x2e, 0x26, 0xe3, 0x70, 0x19, 0x87, 0x57, 0xca, 0xc8, 0x1a, 0xa2, 0xbc, 0x8c, 0x8c, 0x83,
	0x6b, 0xa8, 0xc7, 0xa0, 0x19, 0x38, 0x01, 0xcb, 0x3b, 0xff, 0x93, 0x88, 0xaf, 0x61, 0x9d, 0xa2,
	0xcb, 0x7a, 0xc8, 0x3b, 0x05, 0x01, 0xb4, 0x9c, 0xcb, 0x9f, 0x00, 0x49, 0xc7, 0x35, 0xf4, 0x0b,
	0x68, 0x1d, 0x92, 0x64, 0x18, 0x4e, 0x90, 0x99, 0x5f, 0x2a, 0x1b, 0x53, 0x6b, 0xb7, 0xb0, 0x5a,
	0xb2, 0x70, 0x0d, 0xfd, 0x0c, 0xd6, 0xd9, 0x27, 0x15, 0x71, 0x5b, 0x13, 0x21, 0x9e, 0xa9, 0xac,
	0x3b, 0xfa, 0x72, 0x41, 0xc6, 0x35, 0x74, 0x00, 0x1b, 0x6a, 0xd2, 0xd5, 0x15, 0x50, 0x38, 0x79,
	0x05, 0x14, 0x16, 0xae, 0xa1, 0xd7, 0x70, 0xbb, 0xb4, 0x31, 0x7a, 0x50, 0x3c, 0x66, 0xb9, 0x29,
	0x16, 0x2e, 0x39, 0x6e, 0xb9, 0x39, 0xb8, 0x86, 0xbe, 0x80, 0xc6, 0xc8, 0x59, 0xa2, 0x1d, 0x4d,
	0xde, 0xc8, 0x59, 0x5a, 0xb7, 0xf4, 0xe5, 0x23, 0x87, 0xe2, 0x71, 0x02, 0x77, 0x94, 0x02, 0x4d,
	0xc9, 0x62, 0x05, 0x7c, 0xe5, 0x9c, 0x12, 0x7c, 0x25, 0x2b, 0x3b, 0x20, 0xe2, 0x5d, 0xa3, 0x70,
	0x40, 0x04, 0xa3, 0xe4, 0x80, 0x08, 0x0e, 0xae, 0xa1, 0x43, 0xd8, 0xd4, 0xea, 0x85, 0xdd, 0x12,
	0x4d, 0x38, 0x2b, 0x1f, 0x80, 0x2a, 0x0f, 0xd7, 0xd0, 0x77, 0xf0, 0x51, 0x69, 0x71, 0x90, 0x97,
	0x97, 0x9f, 0x61, 0x3d, 0x28, 0x88, 0x2d, 0x08, 0xe1, 0x76, 0xca, 0xc8, 0x2e, 0xd8, 0x29, 0xc3,
	0xba, 0x68, 0x67, 0x16, 0xd3, 0x07, 0x2c, 0x1e, 0xd3, 0xba, 0xb2, 0x0c, 0x70, 0xc6, 0x29, 0x07,
	0x9c, 0xf7, 0xf1, 0x35, 0x74, 0x0c, 0x3b, 0x5a, 0x0e, 0x66, 0x8f, 0x78, 0x79, 0x51, 0x19, 0xbb,
	0xe4, 0xa2, 0xc9, 0x98, 0x2c, 0xc0, 0x36, 0xe5, 0x0f, 0x86, 0x2f, 0xbc, 0x38, 0xc9, 0x45, 0xa8,
	0x64, 0xe5, 0x23, 0x54, 0xd2, 0xb9, 0x00, 0xf9, 0x0b, 0x6c, 0x89, 0x00, 0xc9, 0x2a, 0x09, 0x71,
	0x45, 0x80, 0xfc, 0xa5, 0xb9, 0x44, 0x80, 0x64, 0xe5, 0x05, 0x48, 0x3a, 0xbf, 0x77, 0xf5, 0xdf,
	0xde, 0x75, 0x38, 0x34, 0x5e, 0x1e, 0x0e, 0x8d, 0xc9, 0xcf, 0xa2, 0xf6, 0x3f, 0x0f, 0xbb, 0xa5,
	0xa2, 0x28, 0x2b, 0x7f, 0x16, 0x55, 0x1e, 0x73, 0xd3, 0x56, 0xee, 0xc5, 0x40, 0xdb, 0x39, 0xf7,
	0xa4, 0x61, 0xdd, 0xd7, 0x85, 0xe9, 0x5c, 0x6e, 0xa3, 0xde, 0xee, 0x5b, 0xc5, 0xeb, 0x23, 0x15,
	0xf6, 0x71, 0xc9, 0xbd, 0xa1, 0xc8, 0xea, 0xd3, 0xe6, 0x5c, 0x29, 0xbc, 0x94, 0xc3, 0xac, 0x55,
	0x64, 0x96, 0xc2, 0xd0, 0xcb, 0x0c, 0x45, 0x86, 0xa8, 0x33, 0x8a, 0x32, 0x38, 0xa3, 0x44, 0x06,
	0x67, 0xe0, 0xda, 0xa4, 0xc5, 0x38, 0x4f, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x9d, 0xfb, 0x8a,
	0x1e, 0x88, 0x23, 0x00, 0x00,
}
