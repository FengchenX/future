// Code generated by protoc-gen-go. DO NOT EDIT.
// source: obj.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 用户账户信息结构体
type UserAccount struct {
	Address   string `protobuf:"bytes,1,opt,name=Address" json:"Address,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	BankCard  string `protobuf:"bytes,3,opt,name=BankCard" json:"BankCard,omitempty"`
	WeChat    string `protobuf:"bytes,4,opt,name=WeChat" json:"WeChat,omitempty"`
	Alipay    string `protobuf:"bytes,5,opt,name=Alipay" json:"Alipay,omitempty"`
	Telephone string `protobuf:"bytes,6,opt,name=Telephone" json:"Telephone,omitempty"`
}

func (m *UserAccount) Reset()                    { *m = UserAccount{} }
func (m *UserAccount) String() string            { return proto.CompactTextString(m) }
func (*UserAccount) ProtoMessage()               {}
func (*UserAccount) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *UserAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserAccount) GetBankCard() string {
	if m != nil {
		return m.BankCard
	}
	return ""
}

func (m *UserAccount) GetWeChat() string {
	if m != nil {
		return m.WeChat
	}
	return ""
}

func (m *UserAccount) GetAlipay() string {
	if m != nil {
		return m.Alipay
	}
	return ""
}

func (m *UserAccount) GetTelephone() string {
	if m != nil {
		return m.Telephone
	}
	return ""
}

// 账本详情结构体
type AccountBook struct {
	Address         string       `protobuf:"bytes,1,opt,name=Address" json:"Address,omitempty"`
	OrderId         string       `protobuf:"bytes,2,opt,name=OrderId" json:"OrderId,omitempty"`
	Money           float64      `protobuf:"fixed64,3,opt,name=Money" json:"Money,omitempty"`
	Rflag           bool         `protobuf:"varint,4,opt,name=Rflag" json:"Rflag,omitempty"`
	TransferDetails string       `protobuf:"bytes,5,opt,name=TransferDetails" json:"TransferDetails,omitempty"`
	Radio           float64      `protobuf:"fixed64,6,opt,name=Radio" json:"Radio,omitempty"`
	Acco            *UserAccount `protobuf:"bytes,7,opt,name=Acco" json:"Acco,omitempty"`
	SubWay          int64        `protobuf:"varint,8,opt,name=SubWay" json:"SubWay,omitempty"`
}

func (m *AccountBook) Reset()                    { *m = AccountBook{} }
func (m *AccountBook) String() string            { return proto.CompactTextString(m) }
func (*AccountBook) ProtoMessage()               {}
func (*AccountBook) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *AccountBook) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AccountBook) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *AccountBook) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *AccountBook) GetRflag() bool {
	if m != nil {
		return m.Rflag
	}
	return false
}

func (m *AccountBook) GetTransferDetails() string {
	if m != nil {
		return m.TransferDetails
	}
	return ""
}

func (m *AccountBook) GetRadio() float64 {
	if m != nil {
		return m.Radio
	}
	return 0
}

func (m *AccountBook) GetAcco() *UserAccount {
	if m != nil {
		return m.Acco
	}
	return nil
}

func (m *AccountBook) GetSubWay() int64 {
	if m != nil {
		return m.SubWay
	}
	return 0
}

// 订单分账结构体
type OrderDliver struct {
	OrderId string         `protobuf:"bytes,1,opt,name=OrderId" json:"OrderId,omitempty"`
	Abs     []*AccountBook `protobuf:"bytes,2,rep,name=Abs" json:"Abs,omitempty"`
}

func (m *OrderDliver) Reset()                    { *m = OrderDliver{} }
func (m *OrderDliver) String() string            { return proto.CompactTextString(m) }
func (*OrderDliver) ProtoMessage()               {}
func (*OrderDliver) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *OrderDliver) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrderDliver) GetAbs() []*AccountBook {
	if m != nil {
		return m.Abs
	}
	return nil
}

// 好友信息结构体
type Friend struct {
	Name    string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Phone   string `protobuf:"bytes,2,opt,name=Phone" json:"Phone,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=Address" json:"Address,omitempty"`
}

func (m *Friend) Reset()                    { *m = Friend{} }
func (m *Friend) String() string            { return proto.CompactTextString(m) }
func (*Friend) ProtoMessage()               {}
func (*Friend) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *Friend) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Friend) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Friend) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// 发布分配比例结构体
type Sd struct {
	Owner        string         `protobuf:"bytes,1,opt,name=Owner" json:"Owner,omitempty"`
	CreateTime   int64          `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty"`
	Status       uint32         `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty"`
	Rss          []*Rs          `protobuf:"bytes,4,rep,name=Rss" json:"Rss,omitempty"`
	UserAccounts []*UserAccount `protobuf:"bytes,5,rep,name=UserAccounts" json:"UserAccounts,omitempty"`
	ScheduleId   string         `protobuf:"bytes,6,opt,name=ScheduleId" json:"ScheduleId,omitempty"`
	Message      string         `protobuf:"bytes,7,opt,name=Message" json:"Message,omitempty"`
}

func (m *Sd) Reset()                    { *m = Sd{} }
func (m *Sd) String() string            { return proto.CompactTextString(m) }
func (*Sd) ProtoMessage()               {}
func (*Sd) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *Sd) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Sd) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Sd) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Sd) GetRss() []*Rs {
	if m != nil {
		return m.Rss
	}
	return nil
}

func (m *Sd) GetUserAccounts() []*UserAccount {
	if m != nil {
		return m.UserAccounts
	}
	return nil
}

func (m *Sd) GetScheduleId() string {
	if m != nil {
		return m.ScheduleId
	}
	return ""
}

func (m *Sd) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 发布排班结构体
type PaiBan struct {
	Owner        string         `protobuf:"bytes,1,opt,name=Owner" json:"Owner,omitempty"`
	CreateTime   int64          `protobuf:"varint,2,opt,name=CreateTime" json:"CreateTime,omitempty"`
	Status       uint32         `protobuf:"varint,3,opt,name=Status" json:"Status,omitempty"`
	UserAddress  string         `protobuf:"bytes,4,opt,name=UserAddress" json:"UserAddress,omitempty"`
	JobName      string         `protobuf:"bytes,5,opt,name=JobName" json:"JobName,omitempty"`
	UserAccounts []*UserAccount `protobuf:"bytes,6,rep,name=UserAccounts" json:"UserAccounts,omitempty"`
	ScheduleId   string         `protobuf:"bytes,7,opt,name=ScheduleId" json:"ScheduleId,omitempty"`
}

func (m *PaiBan) Reset()                    { *m = PaiBan{} }
func (m *PaiBan) String() string            { return proto.CompactTextString(m) }
func (*PaiBan) ProtoMessage()               {}
func (*PaiBan) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *PaiBan) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *PaiBan) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *PaiBan) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PaiBan) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *PaiBan) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *PaiBan) GetUserAccounts() []*UserAccount {
	if m != nil {
		return m.UserAccounts
	}
	return nil
}

func (m *PaiBan) GetScheduleId() string {
	if m != nil {
		return m.ScheduleId
	}
	return ""
}

// 每个人的分配比例结构体
type Rs struct {
	// 参与分账账户
	Accounts string `protobuf:"bytes,1,opt,name=Accounts" json:"Accounts,omitempty"`
	// 分账的等级 : 总量分配时优先级较高的优先分到钱，同时比例分配的优先级永远低于总量分配，1级最高优先级,其次为23456
	Level int64 `protobuf:"varint,2,opt,name=Level" json:"Level,omitempty"`
	// 分账的比例 : 比例分配时填写比例，总量分配时填写分配总数
	Radios float64 `protobuf:"fixed64,3,opt,name=Radios" json:"Radios,omitempty"`
	// 分配方式 : 0为按比例分配，1为按总量分配
	SubWay int64 `protobuf:"varint,4,opt,name=SubWay" json:"SubWay,omitempty"`
	// 重置方式 : 2为每月1号重置。 1为每天重置  0为不重置
	ResetWay int64 `protobuf:"varint,5,opt,name=ResetWay" json:"ResetWay,omitempty"`
	// 重置时间 : 重置时间为整数1~6，代表每天凌晨1点~6点启动更新
	ResetTime int64 `protobuf:"varint,6,opt,name=ResetTime" json:"ResetTime,omitempty"`
	// 已经分配数 (只有定额才有)
	GetMoney float64 `protobuf:"fixed64,7,opt,name=GetMoney" json:"GetMoney,omitempty"`
	// 参与分账职位
	Job string `protobuf:"bytes,8,opt,name=Job" json:"Job,omitempty"`
}

func (m *Rs) Reset()                    { *m = Rs{} }
func (m *Rs) String() string            { return proto.CompactTextString(m) }
func (*Rs) ProtoMessage()               {}
func (*Rs) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *Rs) GetAccounts() string {
	if m != nil {
		return m.Accounts
	}
	return ""
}

func (m *Rs) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Rs) GetRadios() float64 {
	if m != nil {
		return m.Radios
	}
	return 0
}

func (m *Rs) GetSubWay() int64 {
	if m != nil {
		return m.SubWay
	}
	return 0
}

func (m *Rs) GetResetWay() int64 {
	if m != nil {
		return m.ResetWay
	}
	return 0
}

func (m *Rs) GetResetTime() int64 {
	if m != nil {
		return m.ResetTime
	}
	return 0
}

func (m *Rs) GetGetMoney() float64 {
	if m != nil {
		return m.GetMoney
	}
	return 0
}

func (m *Rs) GetJob() string {
	if m != nil {
		return m.Job
	}
	return ""
}

type Bill struct {
	Name    string  `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Money   float64 `protobuf:"fixed64,2,opt,name=Money" json:"Money,omitempty"`
	Ratio   float64 `protobuf:"fixed64,3,opt,name=Ratio" json:"Ratio,omitempty"`
	SubWay  uint32  `protobuf:"varint,4,opt,name=SubWay" json:"SubWay,omitempty"`
	PayAcco string  `protobuf:"bytes,5,opt,name=PayAcco" json:"PayAcco,omitempty"`
}

func (m *Bill) Reset()                    { *m = Bill{} }
func (m *Bill) String() string            { return proto.CompactTextString(m) }
func (*Bill) ProtoMessage()               {}
func (*Bill) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *Bill) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Bill) GetMoney() float64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *Bill) GetRatio() float64 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *Bill) GetSubWay() uint32 {
	if m != nil {
		return m.SubWay
	}
	return 0
}

func (m *Bill) GetPayAcco() string {
	if m != nil {
		return m.PayAcco
	}
	return ""
}

func init() {
	proto.RegisterType((*UserAccount)(nil), "protocol.UserAccount")
	proto.RegisterType((*AccountBook)(nil), "protocol.AccountBook")
	proto.RegisterType((*OrderDliver)(nil), "protocol.OrderDliver")
	proto.RegisterType((*Friend)(nil), "protocol.Friend")
	proto.RegisterType((*Sd)(nil), "protocol.Sd")
	proto.RegisterType((*PaiBan)(nil), "protocol.PaiBan")
	proto.RegisterType((*Rs)(nil), "protocol.Rs")
	proto.RegisterType((*Bill)(nil), "protocol.Bill")
}

func init() { proto.RegisterFile("obj.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 600 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x95, 0xb3, 0xe9, 0x26, 0x99, 0xb4, 0x02, 0x59, 0x05, 0x59, 0x08, 0x55, 0xd1, 0x5e, 0x08,
	0x97, 0x1e, 0xe0, 0xc4, 0x31, 0x69, 0x05, 0x6a, 0xd5, 0xd2, 0xc8, 0x2d, 0xea, 0xd9, 0x9b, 0x9d,
	0xb6, 0x4b, 0x97, 0x75, 0x65, 0x6f, 0x0a, 0xb9, 0xf1, 0x33, 0xfc, 0x0e, 0xbf, 0xc1, 0x09, 0x89,
	0x4f, 0x40, 0x1e, 0x7b, 0x37, 0x9b, 0xa0, 0x72, 0x40, 0x9c, 0xb2, 0xef, 0xd9, 0xb1, 0xdf, 0x7b,
	0x33, 0x63, 0x18, 0xe8, 0xf4, 0xe3, 0xfe, 0x9d, 0xd1, 0x95, 0xe6, 0x7d, 0xfa, 0x99, 0xeb, 0x22,
	0xf9, 0xc6, 0x60, 0xf8, 0xc1, 0xa2, 0x99, 0xcc, 0xe7, 0x7a, 0x51, 0x56, 0x5c, 0x40, 0x6f, 0x92,
	0x65, 0x06, 0xad, 0x15, 0x6c, 0xc4, 0xc6, 0x03, 0x59, 0x43, 0xce, 0xa1, 0xfb, 0x5e, 0x7d, 0x42,
	0xd1, 0x21, 0x9a, 0xbe, 0xf9, 0x33, 0xe8, 0x4f, 0x55, 0x79, 0x7b, 0xa0, 0x4c, 0x26, 0x22, 0xe2,
	0x1b, 0xcc, 0x9f, 0x42, 0x7c, 0x89, 0x07, 0x37, 0xaa, 0x12, 0x5d, 0x5a, 0x09, 0xc8, 0xf1, 0x93,
	0x22, 0xbf, 0x53, 0x4b, 0xb1, 0xe5, 0x79, 0x8f, 0xf8, 0x73, 0x18, 0x5c, 0x60, 0x81, 0x77, 0x37,
	0xba, 0x44, 0x11, 0xd3, 0xd2, 0x8a, 0x48, 0x7e, 0x31, 0x18, 0x06, 0x8d, 0x53, 0xad, 0x6f, 0xff,
	0xa2, 0x53, 0x40, 0xef, 0xcc, 0x64, 0x68, 0x8e, 0xb2, 0x20, 0xb5, 0x86, 0x7c, 0x17, 0xb6, 0x4e,
	0x75, 0x89, 0x4b, 0x92, 0xca, 0xa4, 0x07, 0x8e, 0x95, 0x57, 0x85, 0xba, 0x26, 0x99, 0x7d, 0xe9,
	0x01, 0x1f, 0xc3, 0xa3, 0x0b, 0xa3, 0x4a, 0x7b, 0x85, 0xe6, 0x10, 0x2b, 0x95, 0x17, 0x36, 0xc8,
	0xdd, 0xa4, 0xe9, 0xff, 0x2a, 0xcb, 0x35, 0x69, 0x66, 0xd2, 0x03, 0xfe, 0x12, 0xba, 0x4e, 0xae,
	0xe8, 0x8d, 0xd8, 0x78, 0xf8, 0xea, 0xc9, 0x7e, 0x1d, 0xf8, 0x7e, 0x2b, 0x6c, 0x49, 0x5b, 0x5c,
	0x20, 0xe7, 0x8b, 0xf4, 0x52, 0x2d, 0x45, 0x7f, 0xc4, 0xc6, 0x91, 0x0c, 0x28, 0x99, 0xc1, 0x90,
	0x94, 0x1f, 0x16, 0xf9, 0x3d, 0x9a, 0xb6, 0x2f, 0xb6, 0xee, 0xeb, 0x05, 0x44, 0x93, 0xd4, 0x8a,
	0xce, 0x28, 0x5a, 0xbf, 0xaa, 0x95, 0x97, 0x74, 0x3b, 0x92, 0x13, 0x88, 0xdf, 0x9a, 0x1c, 0xcb,
	0xac, 0x29, 0x26, 0x6b, 0x15, 0x73, 0x17, 0xb6, 0x66, 0x14, 0xbe, 0x8f, 0xcd, 0x83, 0x76, 0xd0,
	0xd1, 0x5a, 0xd0, 0xc9, 0x0f, 0x06, 0x9d, 0x73, 0x4a, 0xf5, 0xec, 0x73, 0x89, 0x26, 0x9c, 0xe5,
	0x01, 0xdf, 0x03, 0x38, 0x30, 0xa8, 0x2a, 0xbc, 0xc8, 0x43, 0xcf, 0x44, 0xb2, 0xc5, 0x90, 0xe9,
	0x4a, 0x55, 0x0b, 0x7f, 0xea, 0x8e, 0x0c, 0x88, 0xef, 0x41, 0x24, 0xad, 0x15, 0x5d, 0xf2, 0xb2,
	0xbd, 0xf2, 0x22, 0xad, 0x74, 0x0b, 0xfc, 0x0d, 0x6c, 0xb7, 0x12, 0x74, 0x45, 0x89, 0x1e, 0xce,
	0x77, 0x6d, 0xab, 0x93, 0x74, 0x3e, 0xbf, 0xc1, 0x6c, 0x51, 0xe0, 0x51, 0x16, 0x3a, 0xac, 0xc5,
	0x38, 0xa7, 0xa7, 0x68, 0xad, 0xba, 0x46, 0xaa, 0xda, 0x40, 0xd6, 0x30, 0xf9, 0xc9, 0x20, 0x9e,
	0xa9, 0x7c, 0xaa, 0xca, 0xff, 0xec, 0x76, 0x14, 0x86, 0x2f, 0x04, 0xec, 0x07, 0xa5, 0x4d, 0x39,
	0x51, 0xc7, 0x3a, 0xa5, 0x5a, 0xf9, 0xfe, 0xab, 0xe1, 0x1f, 0x49, 0xc4, 0xff, 0x9a, 0x44, 0x6f,
	0x33, 0x89, 0xe4, 0x3b, 0x83, 0x8e, 0xb4, 0x6e, 0xba, 0x9b, 0xd3, 0xbd, 0xdd, 0x06, 0xbb, 0x1c,
	0x4e, 0xf0, 0x1e, 0x8b, 0x60, 0xd6, 0x03, 0xe7, 0x93, 0xda, 0xdf, 0x86, 0x11, 0x0b, 0xa8, 0xd5,
	0xe2, 0xdd, 0x76, 0x8b, 0xbb, 0x1b, 0x24, 0x5a, 0xac, 0x2e, 0xc3, 0x6b, 0x10, 0xc9, 0x06, 0xbb,
	0xf7, 0x80, 0xbe, 0x29, 0xd2, 0x98, 0x16, 0x57, 0x84, 0xfb, 0xe7, 0x3b, 0xac, 0xfc, 0x38, 0xf7,
	0xe8, 0xae, 0x06, 0xf3, 0xc7, 0x10, 0x1d, 0xeb, 0x94, 0xa6, 0x69, 0x20, 0xdd, 0x67, 0xf2, 0x05,
	0xba, 0xd3, 0xbc, 0x28, 0x1e, 0x6a, 0x7b, 0x7f, 0x4c, 0x67, 0xf3, 0x55, 0x50, 0x55, 0xae, 0xeb,
	0xb7, 0x82, 0xc0, 0x86, 0x8f, 0x9d, 0xc6, 0x87, 0x80, 0xde, 0x4c, 0x2d, 0x69, 0xe0, 0x43, 0x95,
	0x02, 0x9c, 0x46, 0x5f, 0x19, 0x4b, 0x63, 0xaa, 0xc9, 0xeb, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x43, 0xc8, 0xba, 0x63, 0x82, 0x05, 0x00, 0x00,
}
