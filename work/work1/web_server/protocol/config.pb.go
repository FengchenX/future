// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ------------------------------获取配置------------------------------
type ReqGetConfig struct {
	Address string `protobuf:"bytes,1,opt,name=Address" json:"Address,omitempty"`
}

func (m *ReqGetConfig) Reset()                    { *m = ReqGetConfig{} }
func (m *ReqGetConfig) String() string            { return proto.CompactTextString(m) }
func (*ReqGetConfig) ProtoMessage()               {}
func (*ReqGetConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ReqGetConfig) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type RespGetConfig struct {
	OperateTimeout uint32 `protobuf:"varint,1,opt,name=Operate_timeout,json=OperateTimeout" json:"Operate_timeout,omitempty"`
	LocalAddress   string `protobuf:"bytes,2,opt,name=LocalAddress" json:"LocalAddress,omitempty"`
	Port           string `protobuf:"bytes,3,opt,name=Port" json:"Port,omitempty"`
	AccAddress     string `protobuf:"bytes,4,opt,name=AccAddress" json:"AccAddress,omitempty"`
	EthAddress     string `protobuf:"bytes,5,opt,name=EthAddress" json:"EthAddress,omitempty"`
	IpcDir         string `protobuf:"bytes,6,opt,name=IpcDir" json:"IpcDir,omitempty"`
	ServerId       string `protobuf:"bytes,7,opt,name=ServerId" json:"ServerId,omitempty"`
	ManagerKey     string `protobuf:"bytes,8,opt,name=ManagerKey" json:"ManagerKey,omitempty"`
	ManagerPhrase  string `protobuf:"bytes,9,opt,name=ManagerPhrase" json:"ManagerPhrase,omitempty"`
	KeyDir         string `protobuf:"bytes,10,opt,name=KeyDir" json:"KeyDir,omitempty"`
	StaticCode     uint32 `protobuf:"varint,11,opt,name=StaticCode" json:"StaticCode,omitempty"`
}

func (m *RespGetConfig) Reset()                    { *m = RespGetConfig{} }
func (m *RespGetConfig) String() string            { return proto.CompactTextString(m) }
func (*RespGetConfig) ProtoMessage()               {}
func (*RespGetConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RespGetConfig) GetOperateTimeout() uint32 {
	if m != nil {
		return m.OperateTimeout
	}
	return 0
}

func (m *RespGetConfig) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

func (m *RespGetConfig) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *RespGetConfig) GetAccAddress() string {
	if m != nil {
		return m.AccAddress
	}
	return ""
}

func (m *RespGetConfig) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *RespGetConfig) GetIpcDir() string {
	if m != nil {
		return m.IpcDir
	}
	return ""
}

func (m *RespGetConfig) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *RespGetConfig) GetManagerKey() string {
	if m != nil {
		return m.ManagerKey
	}
	return ""
}

func (m *RespGetConfig) GetManagerPhrase() string {
	if m != nil {
		return m.ManagerPhrase
	}
	return ""
}

func (m *RespGetConfig) GetKeyDir() string {
	if m != nil {
		return m.KeyDir
	}
	return ""
}

func (m *RespGetConfig) GetStaticCode() uint32 {
	if m != nil {
		return m.StaticCode
	}
	return 0
}

type ReqSetConfig struct {
	OperateTimeout uint32 `protobuf:"varint,1,opt,name=Operate_timeout,json=OperateTimeout" json:"Operate_timeout,omitempty"`
	LocalAddress   string `protobuf:"bytes,2,opt,name=LocalAddress" json:"LocalAddress,omitempty"`
	Port           string `protobuf:"bytes,3,opt,name=Port" json:"Port,omitempty"`
	AccAddress     string `protobuf:"bytes,4,opt,name=AccAddress" json:"AccAddress,omitempty"`
	EthAddress     string `protobuf:"bytes,5,opt,name=EthAddress" json:"EthAddress,omitempty"`
	IpcDir         string `protobuf:"bytes,6,opt,name=IpcDir" json:"IpcDir,omitempty"`
	ServerId       string `protobuf:"bytes,7,opt,name=ServerId" json:"ServerId,omitempty"`
	ManagerKey     string `protobuf:"bytes,8,opt,name=ManagerKey" json:"ManagerKey,omitempty"`
	ManagerPhrase  string `protobuf:"bytes,9,opt,name=ManagerPhrase" json:"ManagerPhrase,omitempty"`
	KeyDir         string `protobuf:"bytes,10,opt,name=KeyDir" json:"KeyDir,omitempty"`
}

func (m *ReqSetConfig) Reset()                    { *m = ReqSetConfig{} }
func (m *ReqSetConfig) String() string            { return proto.CompactTextString(m) }
func (*ReqSetConfig) ProtoMessage()               {}
func (*ReqSetConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ReqSetConfig) GetOperateTimeout() uint32 {
	if m != nil {
		return m.OperateTimeout
	}
	return 0
}

func (m *ReqSetConfig) GetLocalAddress() string {
	if m != nil {
		return m.LocalAddress
	}
	return ""
}

func (m *ReqSetConfig) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *ReqSetConfig) GetAccAddress() string {
	if m != nil {
		return m.AccAddress
	}
	return ""
}

func (m *ReqSetConfig) GetEthAddress() string {
	if m != nil {
		return m.EthAddress
	}
	return ""
}

func (m *ReqSetConfig) GetIpcDir() string {
	if m != nil {
		return m.IpcDir
	}
	return ""
}

func (m *ReqSetConfig) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *ReqSetConfig) GetManagerKey() string {
	if m != nil {
		return m.ManagerKey
	}
	return ""
}

func (m *ReqSetConfig) GetManagerPhrase() string {
	if m != nil {
		return m.ManagerPhrase
	}
	return ""
}

func (m *ReqSetConfig) GetKeyDir() string {
	if m != nil {
		return m.KeyDir
	}
	return ""
}

type RespSetConfig struct {
	StaticCode uint32 `protobuf:"varint,1,opt,name=StaticCode" json:"StaticCode,omitempty"`
}

func (m *RespSetConfig) Reset()                    { *m = RespSetConfig{} }
func (m *RespSetConfig) String() string            { return proto.CompactTextString(m) }
func (*RespSetConfig) ProtoMessage()               {}
func (*RespSetConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RespSetConfig) GetStaticCode() uint32 {
	if m != nil {
		return m.StaticCode
	}
	return 0
}

func init() {
	proto.RegisterType((*ReqGetConfig)(nil), "protocol.ReqGetConfig")
	proto.RegisterType((*RespGetConfig)(nil), "protocol.RespGetConfig")
	proto.RegisterType((*ReqSetConfig)(nil), "protocol.ReqSetConfig")
	proto.RegisterType((*RespSetConfig)(nil), "protocol.RespSetConfig")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ConfServer service

type ConfServerClient interface {
	GetConfig(ctx context.Context, in *ReqGetConfig, opts ...grpc.CallOption) (*RespGetConfig, error)
	SetConfig(ctx context.Context, in *ReqSetConfig, opts ...grpc.CallOption) (*RespSetConfig, error)
}

type confServerClient struct {
	cc *grpc.ClientConn
}

func NewConfServerClient(cc *grpc.ClientConn) ConfServerClient {
	return &confServerClient{cc}
}

func (c *confServerClient) GetConfig(ctx context.Context, in *ReqGetConfig, opts ...grpc.CallOption) (*RespGetConfig, error) {
	out := new(RespGetConfig)
	err := grpc.Invoke(ctx, "/protocol.ConfServer/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confServerClient) SetConfig(ctx context.Context, in *ReqSetConfig, opts ...grpc.CallOption) (*RespSetConfig, error) {
	out := new(RespSetConfig)
	err := grpc.Invoke(ctx, "/protocol.ConfServer/SetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfServer service

type ConfServerServer interface {
	GetConfig(context.Context, *ReqGetConfig) (*RespGetConfig, error)
	SetConfig(context.Context, *ReqSetConfig) (*RespSetConfig, error)
}

func RegisterConfServerServer(s *grpc.Server, srv ConfServerServer) {
	s.RegisterService(&_ConfServer_serviceDesc, srv)
}

func _ConfServer_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfServerServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ConfServer/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfServerServer).GetConfig(ctx, req.(*ReqGetConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfServer_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfServerServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.ConfServer/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfServerServer).SetConfig(ctx, req.(*ReqSetConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.ConfServer",
	HandlerType: (*ConfServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _ConfServer_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _ConfServer_SetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}

func init() { proto.RegisterFile("config.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x53, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0xfd, 0xd2, 0xaf, 0xf6, 0xe7, 0xda, 0x2a, 0xcc, 0xa2, 0x0e, 0x5d, 0x88, 0x04, 0xc1, 0xae,
	0x2a, 0xe8, 0x5e, 0x28, 0x55, 0xa4, 0x54, 0xb1, 0x24, 0xee, 0x65, 0x9c, 0x5c, 0xdb, 0x40, 0xed,
	0xc4, 0xc9, 0x28, 0xf4, 0x1d, 0x7c, 0x29, 0x5f, 0xc5, 0x27, 0x91, 0xb9, 0xd3, 0x38, 0x89, 0xd0,
	0x8d, 0x6b, 0x57, 0xc9, 0x39, 0x67, 0xce, 0xb9, 0xe1, 0x64, 0x2e, 0x74, 0xa4, 0x5a, 0x3d, 0xa5,
	0xf3, 0x61, 0xa6, 0x95, 0x51, 0xac, 0x45, 0x0f, 0xa9, 0x96, 0xe1, 0x00, 0x3a, 0x11, 0xbe, 0x5c,
	0xa3, 0x19, 0x93, 0xce, 0x38, 0x34, 0x47, 0x49, 0xa2, 0x31, 0xcf, 0x79, 0x70, 0x14, 0x0c, 0xda,
	0x51, 0x01, 0xc3, 0xcf, 0x1a, 0x74, 0x23, 0xcc, 0x33, 0x7f, 0xf6, 0x04, 0xf6, 0xef, 0x32, 0xd4,
	0xc2, 0xe0, 0x83, 0x49, 0x9f, 0x51, 0xbd, 0x1a, 0xf2, 0x74, 0xa3, 0xbd, 0x0d, 0x7d, 0xef, 0x58,
	0x16, 0x42, 0xe7, 0x46, 0x49, 0xb1, 0x2c, 0x92, 0x6b, 0x94, 0x5c, 0xe1, 0x18, 0x83, 0xfa, 0x4c,
	0x69, 0xc3, 0xff, 0x93, 0x46, 0xef, 0xec, 0x10, 0x60, 0x24, 0x65, 0xe1, 0xaa, 0x93, 0x52, 0x62,
	0xac, 0x7e, 0x65, 0x16, 0x85, 0xbe, 0xe3, 0x74, 0xcf, 0xb0, 0x1e, 0x34, 0x26, 0x99, 0xbc, 0x4c,
	0x35, 0x6f, 0x90, 0xb6, 0x41, 0xac, 0x0f, 0xad, 0x18, 0xf5, 0x1b, 0xea, 0x49, 0xc2, 0x9b, 0xa4,
	0x7c, 0x63, 0x9b, 0x79, 0x2b, 0x56, 0x62, 0x8e, 0x7a, 0x8a, 0x6b, 0xde, 0x72, 0x99, 0x9e, 0x61,
	0xc7, 0xd0, 0xdd, 0xa0, 0xd9, 0x42, 0x8b, 0x1c, 0x79, 0x9b, 0x8e, 0x54, 0x49, 0x3b, 0x79, 0x8a,
	0x6b, 0x3b, 0x19, 0xdc, 0x64, 0x87, 0x6c, 0x7a, 0x6c, 0x84, 0x49, 0xe5, 0x58, 0x25, 0xc8, 0x77,
	0xa9, 0xad, 0x12, 0x13, 0x7e, 0xd4, 0xe8, 0x7f, 0xc4, 0x7f, 0x1d, 0xff, 0xba, 0xe3, 0xf0, 0xd4,
	0xdd, 0x53, 0xdf, 0x61, 0xb5, 0xf4, 0xe0, 0x67, 0xe9, 0x67, 0xef, 0x01, 0x80, 0x3d, 0xea, 0xbe,
	0x8f, 0x5d, 0x40, 0xdb, 0xdf, 0xf1, 0xde, 0xb0, 0x58, 0x95, 0x61, 0x79, 0x4f, 0xfa, 0x07, 0x65,
	0xbe, 0xb4, 0x14, 0xe1, 0x3f, 0xeb, 0x8f, 0xb7, 0xf8, 0xe3, 0x6d, 0xfe, 0xd8, 0xfb, 0x1f, 0x1b,
	0xa4, 0x9c, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xed, 0x16, 0xc6, 0x6b, 0xb3, 0x03, 0x00, 0x00,
}
