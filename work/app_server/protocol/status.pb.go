// Code generated by protoc-gen-go. DO NOT EDIT.
// source: status.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Status int32

const (
	Status_Success            Status = 0
	Status_ManageContractFail Status = 20001
	Status_FindContractFail   Status = 20002
	Status_UndateContractFail Status = 20003
	Status_AddContractFail    Status = 20004
	Status_DelContractFail    Status = 20005
	Status_SetSchedueFail     Status = 30001
	Status_GetSchedueFail     Status = 30002
	Status_FindJobFail        Status = 30003
	Status_JobLimitFail       Status = 30004
	Status_GetContentFail     Status = 30005
	Status_SetContentFail     Status = 30006
	Status_GetBalanceFail     Status = 30007
	Status_RoleNotFitFail     Status = 30008
	Status_HasAppliedJobFail  Status = 30009
	Status_LoginFail          Status = 30010
	Status_GetAllIncomeFail   Status = 30011
	Status_AlreadyApply       Status = 30012
	Status_ApplyFull          Status = 30013
	Status_ReqNotFull         Status = 30014
	Status_SetAccountFail     Status = 30015
	Status_GetAccountFail     Status = 30016
	Status_GetAccountBookFail Status = 30017
	Status_ThreeConfirmFail   Status = 30018
	Status_GetByHashFail      Status = 30019
	Status_ThreeSetBillFail   Status = 30020
	Status_ABByIdFail         Status = 30021
)

var Status_name = map[int32]string{
	0:     "Success",
	20001: "ManageContractFail",
	20002: "FindContractFail",
	20003: "UndateContractFail",
	20004: "AddContractFail",
	20005: "DelContractFail",
	30001: "SetSchedueFail",
	30002: "GetSchedueFail",
	30003: "FindJobFail",
	30004: "JobLimitFail",
	30005: "GetContentFail",
	30006: "SetContentFail",
	30007: "GetBalanceFail",
	30008: "RoleNotFitFail",
	30009: "HasAppliedJobFail",
	30010: "LoginFail",
	30011: "GetAllIncomeFail",
	30012: "AlreadyApply",
	30013: "ApplyFull",
	30014: "ReqNotFull",
	30015: "SetAccountFail",
	30016: "GetAccountFail",
	30017: "GetAccountBookFail",
	30018: "ThreeConfirmFail",
	30019: "GetByHashFail",
	30020: "ThreeSetBillFail",
	30021: "ABByIdFail",
}
var Status_value = map[string]int32{
	"Success":            0,
	"ManageContractFail": 20001,
	"FindContractFail":   20002,
	"UndateContractFail": 20003,
	"AddContractFail":    20004,
	"DelContractFail":    20005,
	"SetSchedueFail":     30001,
	"GetSchedueFail":     30002,
	"FindJobFail":        30003,
	"JobLimitFail":       30004,
	"GetContentFail":     30005,
	"SetContentFail":     30006,
	"GetBalanceFail":     30007,
	"RoleNotFitFail":     30008,
	"HasAppliedJobFail":  30009,
	"LoginFail":          30010,
	"GetAllIncomeFail":   30011,
	"AlreadyApply":       30012,
	"ApplyFull":          30013,
	"ReqNotFull":         30014,
	"SetAccountFail":     30015,
	"GetAccountFail":     30016,
	"GetAccountBookFail": 30017,
	"ThreeConfirmFail":   30018,
	"GetByHashFail":      30019,
	"ThreeSetBillFail":   30020,
	"ABByIdFail":         30021,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type Hash int32

const (
	Hash_Successful Hash = 0
	Hash_Pending    Hash = 1
	Hash_Fail       Hash = 2
)

var Hash_name = map[int32]string{
	0: "Successful",
	1: "Pending",
	2: "Fail",
}
var Hash_value = map[string]int32{
	"Successful": 0,
	"Pending":    1,
	"Fail":       2,
}

func (x Hash) String() string {
	return proto.EnumName(Hash_name, int32(x))
}
func (Hash) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func init() {
	proto.RegisterEnum("protocol.Status", Status_name, Status_value)
	proto.RegisterEnum("protocol.Hash", Hash_name, Hash_value)
}

func init() { proto.RegisterFile("status.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x4b, 0x72, 0xd4, 0x30,
	0x10, 0x86, 0x23, 0x98, 0x0a, 0xa1, 0x13, 0x12, 0xa5, 0x79, 0x9e, 0x21, 0x55, 0xb0, 0xe1, 0x04,
	0x36, 0xd4, 0xe4, 0x51, 0x81, 0xa2, 0x62, 0x38, 0x80, 0x46, 0xd6, 0xcc, 0xa8, 0xd0, 0x48, 0x83,
	0x2d, 0x2f, 0x66, 0xc7, 0x41, 0xbc, 0xe1, 0x75, 0x00, 0xde, 0xef, 0x37, 0xec, 0x39, 0x87, 0x4e,
	0x41, 0xa9, 0x35, 0x98, 0xf1, 0xca, 0xe5, 0x4f, 0xfa, 0xbb, 0xbf, 0x52, 0x37, 0x6c, 0xd5, 0x5e,
	0xf8, 0xa6, 0xbe, 0x36, 0xaf, 0x9c, 0x77, 0xb8, 0x41, 0x1f, 0xe9, 0xcc, 0xde, 0x9f, 0x01, 0xac,
	0x17, 0x74, 0x84, 0x9b, 0x70, 0xa6, 0x68, 0xa4, 0x54, 0x75, 0xcd, 0xd7, 0xf0, 0x0a, 0xe0, 0x2d,
	0x61, 0xc5, 0x44, 0xdd, 0x70, 0xd6, 0x57, 0x42, 0xfa, 0xa1, 0xd0, 0x86, 0x3f, 0x6a, 0x19, 0x5e,
	0x02, 0x3e, 0xd4, 0xb6, 0xec, 0xf1, 0xc7, 0x2d, 0x8b, 0x89, 0x7b, 0xb6, 0x14, 0xbe, 0x9f, 0x78,
	0xd2, 0x32, 0xbc, 0x08, 0x3b, 0x59, 0xd9, 0x0f, 0x3c, 0x4d, 0xf8, 0xa6, 0x32, 0x3d, 0xfc, 0xac,
	0x65, 0x78, 0x01, 0xb6, 0x0b, 0xe5, 0x0b, 0x39, 0x55, 0x65, 0xa3, 0x88, 0x3e, 0x0f, 0x44, 0xf7,
	0xfb, 0xf4, 0x45, 0x60, 0xb8, 0x0b, 0x9b, 0xd1, 0xe5, 0xc8, 0x8d, 0x08, 0xbd, 0x0c, 0x0c, 0x11,
	0xb6, 0x8e, 0xdc, 0xe8, 0x58, 0xcf, 0x74, 0x2a, 0xf9, 0xaa, 0x0b, 0xc7, 0x4e, 0xca, 0x26, 0xfa,
	0x3a, 0xfc, 0x6b, 0xb4, 0x4a, 0xdf, 0x74, 0x77, 0x73, 0x61, 0x84, 0x95, 0xa9, 0xd1, 0xdb, 0x44,
	0x4f, 0x9c, 0x51, 0xb7, 0x9d, 0x1f, 0x2e, 0xeb, 0xbe, 0x0b, 0x0c, 0x2f, 0xc3, 0xee, 0x81, 0xa8,
	0xb3, 0xf9, 0xdc, 0x68, 0xd5, 0x49, 0xbc, 0x0f, 0x0c, 0x77, 0xe0, 0xec, 0xb1, 0x9b, 0x68, 0x4b,
	0xe0, 0x43, 0xa0, 0x47, 0xdb, 0x57, 0x3e, 0x33, 0xe6, 0xd0, 0x4a, 0x37, 0x4b, 0x75, 0x3f, 0x26,
	0xdb, 0xcc, 0x54, 0x4a, 0x94, 0x8b, 0x58, 0x65, 0xc1, 0x3f, 0xa5, 0x30, 0xfd, 0x0c, 0x1b, 0x63,
	0xf8, 0xe7, 0xc0, 0x90, 0x03, 0x9c, 0xa8, 0x07, 0xb1, 0x77, 0x24, 0x5f, 0x3a, 0xf5, 0x4c, 0x4a,
	0xd7, 0x2c, 0xd5, 0xbf, 0x76, 0xea, 0xab, 0xf4, 0x5b, 0xa0, 0xb9, 0xfc, 0xa7, 0xb9, 0x73, 0xf7,
	0xe9, 0xe4, 0x7b, 0x92, 0xba, 0x3b, 0xad, 0x54, 0x1c, 0xd8, 0x58, 0x57, 0x33, 0xe2, 0x3f, 0x02,
	0xc3, 0xf3, 0x70, 0x2e, 0x3e, 0xc1, 0xe2, 0x40, 0xd4, 0x53, 0x82, 0x3f, 0x57, 0x2e, 0x17, 0xca,
	0xe7, 0xda, 0x18, 0xe2, 0xbf, 0x92, 0x5c, 0x96, 0xe7, 0x8b, 0xc3, 0x92, 0xc8, 0xef, 0xc0, 0xf6,
	0xae, 0xc2, 0x20, 0x26, 0x71, 0x1b, 0x60, 0xb9, 0x4f, 0xe3, 0xc6, 0xf0, 0xb5, 0xb8, 0x5f, 0x77,
	0x94, 0x2d, 0xb5, 0x9d, 0x70, 0x86, 0x1b, 0x30, 0xa0, 0xc0, 0xa9, 0xfc, 0xf4, 0x43, 0xc6, 0x46,
	0xeb, 0xb4, 0x90, 0xd7, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xf5, 0x35, 0x6f, 0xa7, 0x02,
	0x00, 0x00,
}
