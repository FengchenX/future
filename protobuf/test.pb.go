// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

/*
Package protobuf is a generated protocol buffer package.

包名，通过protoc生成时go文件时

It is generated from these files:
	test.proto

It has these top-level messages:
	Phone
	Person
	ContactBook
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 手机类型
// 枚举类型第一个字段必须为0
type PhoneType int32

const (
	PhoneType_HOME PhoneType = 0
	PhoneType_WORK PhoneType = 1
)

var PhoneType_name = map[int32]string{
	0: "HOME",
	1: "WORK",
}
var PhoneType_value = map[string]int32{
	"HOME": 0,
	"WORK": 1,
}

func (x PhoneType) String() string {
	return proto.EnumName(PhoneType_name, int32(x))
}
func (PhoneType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 手机
type Phone struct {
	Type   PhoneType `protobuf:"varint,1,opt,name=type,enum=protobuf.PhoneType" json:"type,omitempty"`
	Number string    `protobuf:"bytes,2,opt,name=number" json:"number,omitempty"`
}

func (m *Phone) Reset()                    { *m = Phone{} }
func (m *Phone) String() string            { return proto.CompactTextString(m) }
func (*Phone) ProtoMessage()               {}
func (*Phone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Phone) GetType() PhoneType {
	if m != nil {
		return m.Type
	}
	return PhoneType_HOME
}

func (m *Phone) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

// 人
type Person struct {
	// 后面的数字表示标识号
	Id   int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// repeated表示可重复
	// 可以有多个手机
	Phones []*Phone `protobuf:"bytes,3,rep,name=phones" json:"phones,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Person) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Person) GetPhones() []*Phone {
	if m != nil {
		return m.Phones
	}
	return nil
}

// 联系簿
type ContactBook struct {
	Persons []*Person `protobuf:"bytes,1,rep,name=persons" json:"persons,omitempty"`
}

func (m *ContactBook) Reset()                    { *m = ContactBook{} }
func (m *ContactBook) String() string            { return proto.CompactTextString(m) }
func (*ContactBook) ProtoMessage()               {}
func (*ContactBook) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ContactBook) GetPersons() []*Person {
	if m != nil {
		return m.Persons
	}
	return nil
}

func init() {
	proto.RegisterType((*Phone)(nil), "protobuf.Phone")
	proto.RegisterType((*Person)(nil), "protobuf.Person")
	proto.RegisterType((*ContactBook)(nil), "protobuf.ContactBook")
	proto.RegisterEnum("protobuf.PhoneType", PhoneType_name, PhoneType_value)
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8e, 0x41, 0x4b, 0xc4, 0x30,
	0x14, 0x84, 0x4d, 0xb7, 0x1b, 0x77, 0xdf, 0xc2, 0x5a, 0x9e, 0x20, 0xb9, 0x59, 0x7a, 0xd9, 0xb2,
	0x87, 0x1e, 0xea, 0xc9, 0xab, 0x22, 0x14, 0x44, 0x5a, 0x82, 0xe2, 0xb9, 0xb5, 0x11, 0x8b, 0x34,
	0x09, 0x4d, 0x7a, 0xe8, 0xbf, 0x97, 0x3e, 0x5a, 0x11, 0x4f, 0x99, 0x30, 0xdf, 0xcc, 0x3c, 0x00,
	0xaf, 0x9c, 0xcf, 0xec, 0x60, 0xbc, 0xc1, 0x1d, 0x3d, 0xcd, 0xf8, 0x99, 0x14, 0xb0, 0xad, 0xbe,
	0x8c, 0x56, 0x78, 0x82, 0xd0, 0x4f, 0x56, 0x09, 0x16, 0xb3, 0xf4, 0x98, 0x5f, 0x67, 0x2b, 0x91,
	0x91, 0xfd, 0x3a, 0x59, 0x25, 0x09, 0xc0, 0x1b, 0xe0, 0x7a, 0xec, 0x1b, 0x35, 0x88, 0x20, 0x66,
	0xe9, 0x5e, 0x2e, 0xbf, 0xe4, 0x0d, 0x78, 0xa5, 0x06, 0x67, 0x34, 0x1e, 0x21, 0xe8, 0x5a, 0x2a,
	0xda, 0xca, 0xa0, 0x6b, 0x11, 0x21, 0xd4, 0x75, 0xaf, 0x16, 0x9e, 0x34, 0x9e, 0x80, 0xdb, 0xb9,
	0xd8, 0x89, 0x4d, 0xbc, 0x49, 0x0f, 0xf9, 0xd5, 0xbf, 0x41, 0xb9, 0xd8, 0xc9, 0x3d, 0x1c, 0x1e,
	0x8d, 0xf6, 0xf5, 0x87, 0x7f, 0x30, 0xe6, 0x1b, 0xcf, 0x70, 0x69, 0x69, 0xc5, 0x09, 0x46, 0xc1,
	0xe8, 0x4f, 0x90, 0x0c, 0xb9, 0x02, 0xe7, 0x5b, 0xd8, 0xff, 0x1e, 0x8f, 0x3b, 0x08, 0x8b, 0xf2,
	0xe5, 0x29, 0xba, 0x98, 0xd5, 0x7b, 0x29, 0x9f, 0x23, 0xd6, 0x70, 0x8a, 0xde, 0xfd, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x95, 0x8e, 0xd9, 0x1e, 0x1b, 0x01, 0x00, 0x00,
}
